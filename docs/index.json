[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/BIMViewer.js",
    "content": "import {Controller} from \"./Controller.js\";\nimport {BusyModal} from \"./BusyModal.js\";\nimport {ResetAction} from \"./toolbar/ResetAction.js\";\nimport {FitAction} from \"./toolbar/FitAction.js\";\nimport {FirstPersonMode} from \"./toolbar/FirstPersonMode.js\";\nimport {HideTool} from \"./toolbar/HideTool.js\";\nimport {SelectionTool} from \"./toolbar/SelectionTool.js\";\nimport {QueryTool} from \"./toolbar/QueryTool.js\";\nimport {SectionTool} from \"./toolbar/SectionTool.js\";\nimport {NavCubeMode} from \"./toolbar/NavCubeMode.js\";\n\nimport {ModelsExplorer} from \"./explorer/ModelsExplorer.js\";\nimport {ObjectsExplorer} from \"./explorer/ObjectsExplorer.js\";\nimport {ClassesExplorer} from \"./explorer/ClassesExplorer.js\";\nimport {StoreysExplorer} from \"./explorer/StoreysExplorer.js\";\n\nimport {Viewer} from \"@xeokit/xeokit-sdk/src/viewer/Viewer.js\";\nimport {AmbientLight} from \"@xeokit/xeokit-sdk/src/viewer/scene/lights/AmbientLight.js\";\nimport {DirLight} from \"@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js\";\nimport {BCFViewpointsPlugin} from \"@xeokit/xeokit-sdk/src/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js\";\nimport {ThreeDMode} from \"./toolbar/ThreeDMode.js\";\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\nimport {ObjectContextMenuItems} from \"./contextMenuItems/ObjectContextMenuItems.js\";\nimport {CanvasContextMenuItems} from \"./contextMenuItems/CanvasContextMenuItems.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\nconst explorerTemplate = `<div class=\"xeokit-tabs\">\n    <div class=\"xeokit-tab xeokit-modelsTab\">\n        <a class=\"xeokit-tab-btn\" href=\"#\">Models</a>\n        <div class=\"xeokit-tab-content\">\n            <div class=\"xeokit-btn-group\">\n                <button type=\"button\" class=\"xeokit-unloadAllModels xeokit-btn disabled\" data-tippy-content=\"Unload all models\">Unload all</button>\n            </div>\n            <div class=\"xeokit-models\" ></div>\n        </div>\n    </div>\n    <div class=\"xeokit-tab xeokit-objectsTab\">\n        <a class=\"xeokit-tab-btn disabled\" href=\"#\">Objects</a>\n        <div class=\"xeokit-tab-content\">\n         <div class=\"xeokit-btn-group\">\n            <button type=\"button\" class=\"xeokit-showAllObjects xeokit-btn disabled\" data-tippy-content=\"Show all objects\">Show all</button>\n            <button type=\"button\" class=\"xeokit-hideAllObjects xeokit-btn disabled\" data-tippy-content=\"Hide all objects\">Hide all</button>\n        </div>\n        <div class=\"xeokit-objects xeokit-tree-panel\" ></div>\n        </div>\n    </div>\n    <div class=\"xeokit-tab xeokit-classesTab\">\n        <a class=\"xeokit-tab-btn disabled\" href=\"#\">Classes</a>\n        <div class=\"xeokit-tab-content\">\n            <div class=\"xeokit-btn-group\">\n                <button type=\"button\" class=\"xeokit-showAllClasses xeokit-btn disabled\" data-tippy-content=\"Show all classes\">Show all</button>\n                <button type=\"button\" class=\"xeokit-hideAllClasses xeokit-btn disabled\" data-tippy-content=\"Hide all classes\">Hide all</button>\n            </div>\n            <div class=\"xeokit-classes xeokit-tree-panel\" ></div>\n        </div>\n    </div>\n     <div class=\"xeokit-tab xeokit-storeysTab\">\n        <a class=\"xeokit-tab-btn disabled\" href=\"#\">Storeys</a>\n        <div class=\"xeokit-tab-content\">\n         <div class=\"xeokit-btn-group\">\n                <button type=\"button\" class=\"xeokit-showAllStoreys xeokit-btn disabled\" data-tippy-content=\"Show all storeys\">Show all</button>\n                <button type=\"button\" class=\"xeokit-hideAllStoreys xeokit-btn disabled\" data-tippy-content=\"Hide all storeys\">Hide all</button>\n            </div>\n             <div class=\"xeokit-storeys xeokit-tree-panel\"></div>\n        </div>\n    </div>\n</div>`;\n\nconst toolbarTemplate = `<div class=\"xeokit-toolbar\">\n    <!-- Reset button -->\n    <div class=\"xeokit-btn-group\">\n        <button type=\"button\" class=\"xeokit-reset xeokit-btn fa fa-home fa-2x disabled\" data-tippy-content=\"Reset view\"></button>\n    </div>\n    <!-- 3D Mode button -->\n    <div class=\"xeokit-btn-group\" role=\"group\">\n        <button type=\"button\" class=\"xeokit-threeD xeokit-btn fa fa-cube fa-2x\" data-tippy-content=\"Toggle 2D/3D\"></button>\n    </div>\n    <!-- Fit button -->\n    <div class=\"xeokit-btn-group\" role=\"group\">\n        <button type=\"button\" class=\"xeokit-fit xeokit-btn fa fa-crop fa-2x disabled\" data-tippy-content=\"Fit to view\"></button>\n    </div>\n    <!-- First Person mode button -->\n    <div class=\"xeokit-btn-group\" role=\"group\">\n        <button type=\"button\" class=\"xeokit-firstPerson xeokit-btn fa fa-male fa-2x disabled\" data-tippy-content=\"First person\"></button>\n    </div>\n    <!-- Tools button group -->\n    <div class=\"xeokit-btn-group\" role=\"group\">\n        <!-- Hide tool button -->\n        <button type=\"button\" class=\"xeokit-hide xeokit-btn fa fa-eraser fa-2x disabled\" data-tippy-content=\"Hide objects\"></button>\n        <!-- Select tool button -->\n        <button type=\"button\" class=\"xeokit-select xeokit-btn fa fa-mouse-pointer fa-2x disabled\" data-tippy-content=\"Select objects\"></button>\n        <!-- Query tool button -->\n        <button type=\"button\" class=\"xeokit-query xeokit-btn fa fa-info-circle fa-2x disabled\" data-tippy-content=\"Query objects\"></button>\n        <!-- Slice tool button -->\n        <button type=\"button\" class=\"xeokit-section xeokit-btn fa fa-cut fa-2x disabled\" data-tippy-content=\"Slice objects\"></button>\n    </div>\n</div>`;\n\nfunction initTabs(containerElement) {\n\n    const tabsClass = 'xeokit-tabs';\n    const tabClass = 'xeokit-tab';\n    const tabButtonClass = 'xeokit-tab-btn';\n    const activeClass = 'active';\n\n    // Activates the chosen tab and deactivates the rest\n    function activateTab(chosenTabElement) {\n        let tabList = chosenTabElement.parentNode.querySelectorAll('.' + tabClass);\n        for (let i = 0; i < tabList.length; i++) {\n            let tabElement = tabList[i];\n            if (tabElement.isEqualNode(chosenTabElement)) {\n                tabElement.classList.add(activeClass)\n            } else {\n                tabElement.classList.remove(activeClass)\n            }\n        }\n    }\n\n    // Initialize each tabbed container\n    let tabbedContainers = containerElement.querySelectorAll('.' + tabsClass);\n    for (let i = 0; i < tabbedContainers.length; i++) {\n        let tabbedContainer = tabbedContainers[i];\n        let tabList = tabbedContainer.querySelectorAll('.' + tabClass);\n        activateTab(tabList[0]);\n        for (let i = 0; i < tabList.length; i++) {\n            let tabElement = tabList[i];\n            let tabButton = tabElement.querySelector('.' + tabButtonClass);\n            tabButton.addEventListener('click', function (event) {\n                event.preventDefault();\n                if (this.classList.contains(\"disabled\")) {\n                    return;\n                }\n                activateTab(event.target.parentNode);\n            })\n        }\n    }\n}\n\n/**\n * @desc A BIM viewer based on the [xeokit SDK](http://xeokit.io).\n */\nclass BIMViewer extends Controller {\n\n    /**\n     * Constructs a ViewerUI.\n     * @param {Server} server Data access strategy.\n     * @param {*} cfg Configuration.\n     */\n    constructor(server, cfg = {}) {\n\n        if (!cfg.canvasElement) {\n            throw \"Config expected: canvasElement\";\n        }\n\n        if (!cfg.explorerElement) {\n            throw \"Config expected: explorerElement\";\n        }\n\n        if (!cfg.toolbarElement) {\n            throw \"Config expected: toolbarElement\";\n        }\n\n        if (!cfg.navCubeCanvasElement) {\n            throw \"Config expected: navCubeCanvasElement\";\n        }\n\n        if (!cfg.sectionPlanesOverviewCanvasElement) {\n            throw \"Config expected: sectionPlanesOverviewCanvasElement\";\n        }\n\n        const canvasElement = cfg.canvasElement;\n        const explorerElement = cfg.explorerElement;\n        const toolbarElement = cfg.toolbarElement;\n        const navCubeCanvasElement = cfg.navCubeCanvasElement;\n        const sectionPlanesOverviewCanvasElement = cfg.sectionPlanesOverviewCanvasElement;\n        const queryInfoPanelElement = cfg.queryInfoPanelElement;\n\n        explorerElement.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n\n        toolbarElement.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n\n        navCubeCanvasElement.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n\n        sectionPlanesOverviewCanvasElement.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n\n        const viewer = new Viewer({\n            canvasElement: canvasElement,\n            transparent: true\n        });\n\n        super(null, cfg, server, viewer);\n\n        /**\n         * The xeokit [Viewer](https://xeokit.github.io/xeokit-sdk/docs/class/src/viewer/Viewer.js~Viewer.html) at the core of this BIM viewer.\n         *\n         * @type {Viewer}\n         */\n        this.viewer = viewer;\n\n        this._customizeViewer();\n        this._initCanvasContextMenus();\n\n        explorerElement.innerHTML = explorerTemplate;\n        toolbarElement.innerHTML = toolbarTemplate;\n\n        this._explorerElement = explorerElement;\n\n        initTabs(explorerElement);\n\n        this._busyModal = new BusyModal(this); // TODO: Support external spinner dialog\n\n        this._modelsExplorer = new ModelsExplorer(this, {\n            modelsTabElement: explorerElement.querySelector(\".xeokit-modelsTab\"),\n            unloadModelsButtonElement: explorerElement.querySelector(\".xeokit-unloadAllModels\"),\n            modelsElement: explorerElement.querySelector(\".xeokit-models\")\n        });\n\n        this._objectsExplorer = new ObjectsExplorer(this, {\n            objectsTabElement: explorerElement.querySelector(\".xeokit-objectsTab\"),\n            showAllObjectsButtonElement: explorerElement.querySelector(\".xeokit-showAllObjects\"),\n            hideAllObjectsButtonElement: explorerElement.querySelector(\".xeokit-hideAllObjects\"),\n            objectsElement: explorerElement.querySelector(\".xeokit-objects\")\n        });\n\n        this._classesExplorer = new ClassesExplorer(this, {\n            classesTabElement: explorerElement.querySelector(\".xeokit-classesTab\"),\n            showAllClassesButtonElement: explorerElement.querySelector(\".xeokit-showAllClasses\"),\n            hideAllClassesButtonElement: explorerElement.querySelector(\".xeokit-hideAllClasses\"),\n            classesElement: explorerElement.querySelector(\".xeokit-classes\")\n        });\n\n        this._storeysExplorer = new StoreysExplorer(this, {\n            storeysTabElement: explorerElement.querySelector(\".xeokit-storeysTab\"),\n            showAllStoreysButtonElement: explorerElement.querySelector(\".xeokit-showAllStoreys\"),\n            hideAllStoreysButtonElement: explorerElement.querySelector(\".xeokit-hideAllStoreys\"),\n            storeysElement: explorerElement.querySelector(\".xeokit-storeys\")\n        });\n\n        this._resetAction = new ResetAction(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-reset\"),\n            active: false\n        });\n\n        this._fitAction = new FitAction(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-fit\"),\n            active: false\n        });\n\n        this._threeDMode = new ThreeDMode(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-threeD\"),\n            active: false\n        });\n\n        this._firstPersonMode = new FirstPersonMode(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-firstPerson\"),\n            active: false\n        });\n\n        this._hideTool = new HideTool(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-hide\"),\n            active: false\n        });\n\n        this._selectionTool = new SelectionTool(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-select\"),\n            active: false\n        });\n\n        this._queryTool = new QueryTool(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-query\"),\n            queryInfoPanelElement: queryInfoPanelElement,\n            active: false\n        });\n\n        this._sectionTool = new SectionTool(this, {\n            buttonElement: toolbarElement.querySelector(\".xeokit-section\"),\n            sectionPlanesOverviewCanvasElement: sectionPlanesOverviewCanvasElement,\n            active: false\n        });\n\n        this._navCubeMode = new NavCubeMode(this, {\n            navCubeCanvasElement: navCubeCanvasElement,\n            active: true\n        });\n\n        this._threeDMode.setActive(true);\n        this._firstPersonMode.setActive(false);\n        this._navCubeMode.setActive(true);\n\n        this._modelsExplorer.on(\"modelLoaded\", (modelId) => {\n            if (this._modelsExplorer.getNumModelsLoaded() === 1) {\n                this.setControlsEnabled(true);\n            }\n            this.fire(\"modelLoaded\", modelId);\n        });\n\n        this._modelsExplorer.on(\"modelUnloaded\", (modelId) => {\n            if (this._modelsExplorer.getNumModelsLoaded() === 0) {\n                this.setControlsEnabled(false);\n                this.openTab(\"models\");\n            }\n            this.fire(\"modelUnloaded\", modelId);\n        });\n\n        this._queryTool.on(\"queryPicked\", (entityId) => {\n            const event = {};\n            event.entity = this.viewer.scene.objects[entityId];\n            event.metaObject = this.viewer.metaScene.metaObjects[entityId];\n            this.fire(\"queryPicked\", event);\n        });\n\n        this._queryTool.on(\"queryNotPicked\", () => {\n            this.fire(\"queryNotPicked\", true);\n        });\n\n        this.resetView(\"reset\", () => {\n            this.fire(\"reset\", true);\n        });\n\n        this._mutexActivation([this._queryTool, this._hideTool, this._selectionTool, this._sectionTool]);\n\n        explorerElement.querySelector(\".xeokit-showAllObjects\").addEventListener(\"click\", (event) => {\n            this.showAllObjects();\n            event.preventDefault();\n        });\n\n        explorerElement.querySelector(\".xeokit-hideAllObjects\").addEventListener(\"click\", (event) => {\n            this._hideAllObjects();\n            event.preventDefault();\n        });\n\n        explorerElement.querySelector(\".xeokit-showAllClasses\").addEventListener(\"click\", (event) => {\n            this.showAllObjects();\n            event.preventDefault();\n        });\n\n        explorerElement.querySelector(\".xeokit-hideAllClasses\").addEventListener(\"click\", (event) => {\n            this.hideAllObjects();\n            event.preventDefault();\n        });\n\n        explorerElement.querySelector(\".xeokit-showAllStoreys\").addEventListener(\"click\", (event) => {\n            this.showAllObjects();\n            event.preventDefault();\n        });\n\n        explorerElement.querySelector(\".xeokit-hideAllStoreys\").addEventListener(\"click\", (event) => {\n            this.hideAllObjects();\n            event.preventDefault();\n        });\n\n        explorerElement.querySelector(\".xeokit-unloadAllModels\").addEventListener(\"click\", (event) => {\n            this.setControlsEnabled(false); // For quick UI feedback\n            this._modelsExplorer.unloadAllModels();\n            event.preventDefault();\n        });\n\n        this._bcfViewpointsPlugin = new BCFViewpointsPlugin(this.viewer, {});\n    }\n\n    _customizeViewer() {\n\n        const scene = this.viewer.scene;\n\n        scene.xrayMaterial.fill = true;\n        scene.xrayMaterial.fillAlpha = 0.1;\n        scene.xrayMaterial.fillColor = [0, 0, 0];\n        scene.xrayMaterial.edgeAlpha = 0.3;\n        scene.xrayMaterial.edgeColor = [0, 0, 0];\n\n        scene.highlightMaterial.edges = true;\n        scene.highlightMaterial.edgeColor = [.5, .5, 0];\n        scene.highlightMaterial.edgeAlpha = 1.0;\n        scene.highlightMaterial.fill = true;\n        scene.highlightMaterial.fillAlpha = 0.1;\n        scene.highlightMaterial.fillColor = [1, 0, 0];\n\n        scene.clearLights();\n\n        new AmbientLight(scene, {\n            color: [0.3, 0.3, 0.3],\n            intensity: 1.0\n        });\n\n        new DirLight(scene, {\n            dir: [0.8, -0.6, -0.8],\n            color: [1.0, 1.0, 1.0],\n            intensity: 1.0,\n            space: \"world\"\n        });\n\n        new DirLight(scene, {\n            dir: [-0.8, -0.4, 0.4],\n            color: [1.0, 1.0, 1.0],\n            intensity: 1.0,\n            space: \"world\"\n        });\n\n        new DirLight(scene, {\n            dir: [0.2, -0.8, 0.8],\n            color: [0.6, 0.6, 0.6],\n            intensity: 1.0,\n            space: \"world\"\n        });\n\n        this.viewer.cameraControl.panRightClick = false; // Pan on left-click\n    }\n\n    _initCanvasContextMenus() {\n\n        this._canvasContextMenu = new ContextMenu({\n            context: {\n                viewer: this.viewer\n            },\n            items: CanvasContextMenuItems\n        });\n\n        this._objectContextMenu = new ContextMenu({\n            items: ObjectContextMenuItems\n        });\n\n        this.viewer.scene.canvas.canvas.oncontextmenu = (e) => {\n\n            const hit = this.viewer.scene.pick({\n                canvasPos: [e.offsetX, e.offsetY]\n            });\n\n            if (hit && hit.entity.isObject) {\n                this._canvasContextMenu.hide();\n                this._objectContextMenu.show(e.pageX, e.pageY);\n                this._objectContextMenu.context = {\n                    viewer: this.viewer,\n                    bimViewer: this,\n                    showNodeInTreeViews: (objectId) => {\n                        this._objectsExplorer.showNodeInTreeView(objectId); // TODO: Show node only in currently visible tree\n                        this._classesExplorer.showNodeInTreeView(objectId);\n                        this._storeysExplorer.showNodeInTreeView(objectId);\n                    },\n                    entity: hit.entity\n                };\n            } else {\n                this._objectContextMenu.hide();\n                this._canvasContextMenu.show(e.pageX, e.pageY);\n                this._canvasContextMenu.context = {\n                    viewer: this.viewer,\n                    bimViewer: this\n                };\n            }\n\n            e.preventDefault();\n        };\n\n    }\n\n    /**\n     * Gets information on all available projects.\n     *\n     * ### Example\n     *\n     * ````javascript\n     * myViewer.getProjectsInfo((projectsInfo) => {\n     *      console.log(JSON.stringify(projectsInfo, null, \"\\t\"));\n     * });\n     * ````\n     *\n     * Returns JSON similar to:\n     *\n     * ````json\n     * {\n     *      \"projects\": [\n     *          {\n     *              \"id\": \"Duplex\",\n     *              \"name\": \"Duplex\"\n     *          },\n     *          {\n     *              \"id\": \"Schependomlaan\",\n     *              \"name\": \"Schependomlaan\"\n     *          },\n     *          {\n     *              \"id\": \"WestRiversideHospital\",\n     *              \"name\": \"West Riverside Hospital\"\n     *          }\n     *\t    ]\n     * }\n     * ````\n     * @param {Function} done Callback invoked on success, into which the projects information JSON is passed.\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\n     */\n    getProjectsInfo(done, error) {\n        if (!done) {\n            this.error(\"getProjectsInfo() - Argument expected: 'done'\");\n            return;\n        }\n        this.server.getProjects( done, (errorMsg) => {\n            this.error(\"getProjectsInfo() - \" + errorMsg);\n            if (error) {\n                error(errorMsg);\n            }\n        });\n    }\n\n    /**\n     * Gets information on the given project.\n     *\n     * Use {@link BIMViewer#getProjects} to get information on all available projects.\n     *\n     * ### Example\n     *\n     * ````javascript\n     * myViewer.getProjectInfo((\"Duplex\") => {\n     *      console.log(JSON.stringify(projectInfo, null, \"\\t\"));\n     * });\n     * ````\n     *\n     * Returns JSON similar to:\n     *\n     * ````json\n     * {\n     *      \"id\": \"Duplex\",\n     *      \"name\": \"Duplex\"\n     * }\n     * ````\n     *\n     * @param {String} projectId ID of the project to get information on. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}.\n     * @param {Function} done Callback invoked on success, into which the project information JSON is passed.\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\n     */\n    getProjectInfo(projectId, done, error) {\n        if (!projectId) {\n            this.error(\"getProjectInfo() - Argument expected: objectId\");\n            return;\n        }\n        if (!done) {\n            this.error(\"getProjectInfo() - Argument expected: 'done'\");\n            return;\n        }\n        this.server.getProject(projectId,\n            done, (errorMsg) => {\n                this.error(\"getProjectInfo() - \" + errorMsg);\n                if (error) {\n                    error(errorMsg);\n                }\n            });\n    }\n\n    /**\n     * Loads a project into the viewer.\n     *\n     * Unloads any currently loaded project and its models first. If the given project is already loaded, will unload that project first.\n     *\n     * @param {String} projectId ID of the project to load. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}.\n     * @param {Function} done Callback invoked on success.\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\n     */\n    loadProject(projectId, done, error) {\n        if (!projectId) {\n            this.error(\"loadProject() - Argument expected: objectId\");\n            return;\n        }\n        this._modelsExplorer.loadProject(projectId,\n            () => {\n                if (done) {\n                    done();\n                }\n            }, (errorMsg) => {\n                this.error(\"loadProject() - \" + errorMsg);\n                if (error) {\n                    error(errorMsg);\n                }\n            });\n    }\n\n    /**\n     * Unloads whatever project is currently loaded.\n     */\n    unloadProject() {\n        this._modelsExplorer.unloadProject();\n        this.openTab(\"models\");\n        this.setControlsEnabled(false); // For quick UI feedback\n    }\n\n    /**\n     * Returns the ID of the currently loaded project, if any.\n     *\n     * @returns {String} The ID of the currently loaded project, otherwise ````null```` if no project is currently loaded.\n     */\n    getLoadedProjectId() {\n        return this._modelsExplorer.getLoadedProjectId();\n    }\n\n    /**\n     * Loads a model into the viewer.\n     *\n     * Assumes that the project containing the model is currently loaded.\n     *\n     * @param {String} modelId ID of the model to load. Must be the ID of one of the models in the currently loaded project.\n     * @param {Function} done Callback invoked on success.\n     * @param {Function} error Callback invoked on failure, into which the error message string is passed.\n     */\n    loadModel(modelId, done, error) {\n        if (!modelId) {\n            this.error(\"loadModel() - Argument expected: modelId\");\n            return;\n        }\n        this._modelsExplorer.loadModel(modelId,\n            () => {\n                if (done) {\n                    done();\n                }\n            }, (errorMsg) => {\n                this.error(\"loadModel() - \" + errorMsg);\n                if (error) {\n                    error(errorMsg);\n                }\n            });\n    }\n\n    /**\n     * Returns the IDs of the currently loaded models, if any.\n     *\n     * @returns {String[]} The IDs of the currently loaded models, otherwise an empty array if no models are currently loaded.\n     */\n    getLoadedModelIds() {\n        return this._modelsExplorer._getLoadedModelIds();\n    }\n\n    /**\n     * Unloads a model from the viewer.\n     *\n     * Does nothing if the model is not currently loaded.\n     *\n     * @param modelId\n     */\n    unLoadModel(modelId) {\n        if (!modelId) {\n            this.error(\"unLoadModel() - Argument expected: modelId\");\n            return;\n        }\n        this._modelsExplorer.unloadModel(modelId);\n    }\n\n    /**\n     * Unloads all currently loaded models.\n     */\n    unloadAllModels() {\n        this._modelsExplorer.unloadAllModels();\n    }\n\n    /**\n     * Show the given object in the Objects tab.\n     * @param {String} objectId ID of the object\n     */\n    showObjectInObjectsTab(objectId) {\n        if (!objectId) {\n            this.error(\"showObjectInObjectsTab() - Argument expected: objectId\");\n            return;\n        }\n        this._objectsExplorer.showNodeInTreeView(objectId);\n    }\n\n    /**\n     * Show the given object in the Classes tab.\n     * @param {String} objectId ID of the object\n     */\n    showObjectInClassesTab(objectId) {\n        if (!objectId) {\n            this.error(\"showObjectInClassesTab() - Argument expected: objectId\");\n            return;\n        }\n        this._classesExplorer.showNodeInTreeView(objectId);\n\n    }\n\n    /**\n     *\n     * @param {String} objectId ID of the object\n     */\n    showObjectInStoreysTab(objectId) {\n        if (!objectId) {\n            this.error(\"showObjectInStoreysTab() - Argument expected: objectId\");\n            return;\n        }\n        this._storeysExplorer.showNodeInTreeView(objectId);\n    }\n\n    /**\n     * Shows the object with the given ID.\n     * @param {String} objectId ID of object to show.\n     */\n    showObject(objectId) {\n        if (!objectId) {\n            this.error(\"showObject() - Argument expected: objectId\");\n            return;\n        }\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\n            const entity = this.viewer.scene.objects[metaObject.id];\n            if (entity) {\n                entity.visible = true;\n            }\n        });\n    }\n\n    /**\n     * Shows all objects currently in the viewer.\n     */\n    showAllObjects() {\n        this.viewer.scene.setObjectsVisible(this.viewer.scene.objectIds, true);\n    }\n\n    /**\n     * Shows all objects currently in the viewer, except for those with the given IDs.\n     * @param {String[]} objectIds IDs of objects to not show.\n     */\n    showAllObjectsExceptFor(objectIds) {\n        if (!objectId) {\n            this.error(\"showAllObjectsExceptFor() - Argument expected: objectId\");\n            return;\n        }\n    }\n\n    /**\n     * Hides the object with the given ID.\n     * @param {String} objectId ID of object to hide.\n     */\n    hideObject(objectId) {\n        if (!objectId) {\n            this.error(\"hideObject() - Argument expected: objectId\");\n            return;\n        }\n    }\n\n    /**\n     * Hides all objects currently in the viewer.\n     */\n    hideAllObjects() {\n        this.viewer.scene.setObjectsVisible(this.viewer.scene.visibleObjectIds, false);\n    }\n\n    /**\n     * Hides all objects currently in the viewer, except for those with the given IDs.\n     * @param {String[]} objectIds IDs of objects to not hide.\n     */\n    hideAllObjectsExceptFor(objectIds) {\n        if (!objectIds) {\n            this.error(\"hideAllObjectsExceptFor() - Argument expected: objectId\");\n            return;\n        }\n    }\n\n    /**\n     * flies the camera to fit the given object in view.\n     *\n     * @param {String} objectId ID of the object\n     * @param {Function} done Callback invoked on completion\n     */\n    flyToObject(objectId, done) {\n        if (!objectId) {\n            this.error(\"flyToObject() - Argument expected: objectId\");\n            return;\n        }\n        const viewer = this.viewer;\n        const scene = viewer.scene;\n        const objectIds = [];\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\n            if (scene.objects[metaObject.id]) {\n                objectIds.push(metaObject.id);\n            }\n        });\n        if (objectIds.length === 0) {\n            this.error(\"Object not found in viewer: '\" + objectId + \"'\");\n            if (done) {\n                done();\n            }\n            return;\n        }\n        scene.setObjectsVisible(objectIds, true);\n        scene.setObjectsHighlighted(objectIds, true);\n        const aabb = scene.getAABB(objectIds);\n        viewer.cameraFlight.flyTo({\n            aabb: aabb,\n            duration: 0.5\n        }, () => {\n            if (done) {\n                done();\n            }\n            setTimeout(function () {\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n            }, 500);\n        });\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\n    }\n\n    /**\n     * Jumps the camera to fit the given object in view.\n     *\n     * @param {String} objectId ID of the object\n     */\n    jumpToObject(objectId) {\n        if (!objectId) {\n            this.error(\"jumpToObject() - Argument expected: objectId\");\n            return;\n        }\n        const viewer = this.viewer;\n        const scene = viewer.scene;\n        const objectIds = [];\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\n            if (scene.objects[metaObject.id]) {\n                objectIds.push(metaObject.id);\n            }\n        });\n        if (objectIds.length === 0) {\n            this.error(\"Object not found in viewer: '\" + objectId + \"'\");\n            return;\n        }\n        scene.setObjectsVisible(objectIds, true);\n        const aabb = scene.getAABB(objectIds);\n        viewer.cameraFlight.jumpTo({\n            aabb: aabb\n        });\n        viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\n    }\n\n    /**\n     * X-ray the object with the given ID.\n     *\n     * @param {String} objectId ID of object to x-ray.\n     */\n    xrayObject(objectId) {\n        if (!objectId) {\n            this.error(\"xrayObject() - Argument expected: objectId\");\n            return;\n        }\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\n            const entity = this.viewer.scene.objects[metaObject.id];\n            if (entity) {\n                entity.xrayed = true;\n            }\n        });\n    }\n\n    /**\n     * X-rays all objects currently in the viewer.\n     */\n    xrayAllObjects() {\n        this.viewer.scene.setObjectsXRayed(this.viewer.scene.objectIds, true);\n    }\n\n    /**\n     * X-rays all objects currently in the viewer, except for those with the given IDs.\n     * @param {String[]} objectIds IDs of objects to not x-ray.\n     */\n    xrayAllObjectsExceptFor(objectIds) {\n\n    }\n\n    /**\n     * Un-x-rays all objects currently in the viewer.\n     */\n    xrayNoObjects() {\n        this.viewer.scene.setObjectsXRayed(this.viewer.scene.objectIds, false);\n    }\n\n    /**\n     * Selects the objects with the given ID.\n     * @param {String} objectId ID of object to select.\n     */\n    selectObject(objectId) {\n        if (!objectId) {\n            this.error(\"selectObject() - Argument expected: objectId\");\n            return;\n        }\n        this.viewer.metaScene.withMetaObjectsInSubtree(objectId, (metaObject) => {\n            const entity = this.viewer.scene.objects[metaObject.id];\n            if (entity) {\n                entity.selected = true;\n            }\n        });\n    }\n\n    /**\n     * Selects all objects currently in the viewer.\n     */\n    selectAllObjects() {\n        this.viewer.scene.setObjectsSelected(this.viewer.scene.objectIds, true);\n    }\n\n    /**\n     * Selects all objects currently in the viewer, except for those with the given IDs.\n     * @param {String[]} objectIds IDs of objects to not select.\n     */\n    selectAllObjectsExceptFor(objectIds) {\n\n    }\n\n    /**\n     * De-selects all objects currently in the viewer.\n     */\n    deselectAllObjects() {\n        this.viewer.scene.setObjectsSelected(this.viewer.scene.selectedObjectIds, false);\n    }\n\n    /**\n     * Opens the specified viewer tab.\n     *\n     * The available tabs are:\n     *\n     *  * \"models\" - the Models tab, which lists the models available within the currently loaded project,\n     *  * \"objects\" - the Objects tab, which contains a tree view for each loaded model, organized to indicate the containment hierarchy of their objects,\n     *  * \"classes\" - the Classes tab, which contains a tree view for each loaded model, with nodes grouped by IFC types of their objects, and\n     *  * \"storeys\" - the Storeys tab, which contains a tree view for each loaded model, with nodes grouped within ````IfcBuildingStoreys````, sub-grouped by their IFC types.\n     *\n     * @param {String} tabId ID of the tab to open - see method description.\n     */\n    openTab(tabId) {\n        if (!tabId) {\n            this.error(\"openTab() - Argument expected: tabId\");\n            return;\n        }\n        const tabClass = 'xeokit-tab';\n        const activeClass = 'active';\n        let tabSelector;\n        switch (tabId) {\n            case \"models\":\n                tabSelector = \"xeokit-modelsTab\";\n                break;\n            case \"objects\":\n                tabSelector = \"xeokit-objectsTab\";\n                break;\n            case \"classes\":\n                tabSelector = \"xeokit-classesTab\";\n                break;\n            case \"storeys\":\n                tabSelector = \"xeokit-storeysTab\";\n                break;\n            default:\n                this.error(\"openTab() - tab not recognized: '\" + tabId + \"'\");\n                return;\n        }\n        let tabs = this._explorerElement.querySelectorAll(\".\" + tabClass);\n        let tab = this._explorerElement.querySelector(\".\" + tabSelector);\n        for (let i = 0; i < tabs.length; i++) {\n            let tabElement = tabs[i];\n            if (tabElement.isEqualNode(tab)) {\n                tabElement.classList.add(activeClass)\n            } else {\n                tabElement.classList.remove(activeClass)\n            }\n        }\n    }\n\n    /**\n     * Saves viewer state to a BCF viewpoint.\n     *\n     * This does not save information about the project and model(s) that are currently loaded. When loading the viewpoint,\n     * the viewer will assume that the same project and models will be currently loaded (the BCF viewpoint specification\n     * does not contain that information).\n     *\n     * Note that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\n     * direction vector. Therefore, we save ````camera_direction```` as the vector from {@link Camera#eye} to {@link Camera#look}.\n     *\n     * @param {*} [options] Options for getting the viewpoint.\n     * @param {Boolean} [options.spacesVisible=false] Indicates whether ````IfcSpace```` types should be forced visible in the viewpoint.\n     * @param {Boolean} [options.openingsVisible=false] Indicates whether ````IfcOpening```` types should be forced visible in the viewpoint.\n     * @param {Boolean} [options.spaceBoundariesVisible=false] Indicates whether the boundaries of ````IfcSpace```` types should be visible in the viewpoint.\n     * @returns {*} BCF JSON viewpoint object\n     * @example\n     *\n     * const viewpoint = bimViewer.saveBCFViewpoint({\n     *     spacesVisible: false,          // Default\n     *     spaceBoundariesVisible: false, // Default\n     *     openingsVisible: false         // Default\n     * });\n     *\n     * // viewpoint will resemble the following:\n     *\n     * {\n     *     perspective_camera: {\n     *         camera_view_point: {\n     *             x: 0.0,\n     *             y: 0.0,\n     *             z: 0.0\n     *         },\n     *         camera_direction: {\n     *             x: 1.0,\n     *             y: 1.0,\n     *             z: 2.0\n     *         },\n     *         camera_up_vector: {\n     *             x: 0.0,\n     *             y: 0.0,\n     *             z: 1.0\n     *         },\n     *         field_of_view: 90.0\n     *     },\n     *     lines: [],\n     *     clipping_planes: [{\n     *         location: {\n     *             x: 0.5,\n     *             y: 0.5,\n     *             z: 0.5\n     *         },\n     *         direction: {\n     *             x: 1.0,\n     *             y: 0.0,\n     *             z: 0.0\n     *         }\n     *     }],\n     *     bitmaps: [],\n     *     snapshot: {\n     *         snapshot_type: png,\n     *         snapshot_data: \"data:image/png;base64,......\"\n     *     },\n     *     components: {\n     *         visibility: {\n     *             default_visibility: false,\n     *             exceptions: [{\n     *                 ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\n     *                 originating_system: xeokit.io,\n     *                 authoring_tool_id: xeokit/v1.0\n     *             }]\n     *        },\n     *         selection: [{\n     *            ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\n     *         }]\n     *     }\n     * }\n     */\n    saveBCFViewpoint(options) {\n        return this._bcfViewpointsPlugin.getViewpoint(options);\n    }\n\n    /**\n     * Sets viewer state to the given BCF viewpoint.\n     *\n     * This assumes that the viewer currently contains the same project and model(s) that were loaded at the time that the\n     * viewpoint was originally saved (the BCF viewpoint specification does not contain that information).\n     *\n     * Note that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\n     * direction vector. Therefore, when loading a BCF viewpoint, we set {@link Camera#look} to the absolute position\n     * obtained by offsetting the BCF ````camera_view_point````  along ````camera_direction````.\n     *\n     * When loading a viewpoint, we also have the option to find {@link Camera#look} as the closest point of intersection\n     * (on the surface of any visible and pickable {@link Entity}) with a 3D ray fired from ````camera_view_point```` in\n     * the direction of ````camera_direction````.\n     *\n     * @param {*} bcfViewpoint  BCF JSON viewpoint object or \"reset\" / \"RESET\" to reset the viewer, which clears SectionPlanes,\n     * shows default visible entities and restores camera to initial default position.\n     * @param {*} [options] Options for setting the viewpoint.\n     * @param {Boolean} [options.rayCast=true] When ````true```` (default), will attempt to set {@link Camera#look} to the closest\n     * point of surface intersection with a ray fired from the BCF ````camera_view_point```` in the direction of ````camera_direction````.\n     * @param {Boolean} [options.immediate] When ````true```` (default), immediately set camera position.\n     * @param {Boolean} [options.duration] Flight duration in seconds.  Overrides {@link CameraFlightAnimation#duration}.\n     */\n    loadBCFViewpoint(bcfViewpoint, options) {\n        if (!bcfViewpoint) {\n            this.error(\"loadBCFViewpoint() - Argument expected: bcfViewpoint\");\n            return;\n        }\n        this._bcfViewpointsPlugin.setViewpoint(bcfViewpoint, options);\n    }\n\n    /**\n     * Resets the view.\n     */\n    resetView() {\n        this._resetAction.reset();\n    }\n\n    /**\n     * Enables or disables the various buttons and controls throughout the viewer.\n     *\n     * This also makes various buttons appear disabled.\n     *\n     * @param {Boolean} enabled Whether or not to disable the controls.\n     */\n    setControlsEnabled(enabled) {\n\n        // Explorer\n\n        // Models tab is always enabled\n        this._objectsExplorer.setEnabled(enabled);\n        this._classesExplorer.setEnabled(enabled);\n        this._storeysExplorer.setEnabled(enabled);\n\n        // Toolbar\n\n        this._resetAction.setEnabled(enabled);\n        this._fitAction.setEnabled(enabled);\n        this._threeDMode.setEnabled(enabled);\n        this._firstPersonMode.setEnabled(enabled);\n        this._queryTool.setEnabled(enabled);\n        this._hideTool.setEnabled(enabled);\n        this._selectionTool.setEnabled(enabled);\n        this._sectionTool.setEnabled(enabled);\n    }\n\n    /**\n     * Destroys the viewer, freeing all resources.\n     */\n    destroy() {\n        this.viewer.destroy();\n        this._bcfViewpointsPlugin.destroy();\n        this._canvasContextMenu.destroy();\n        this._objectContextMenu.destroy();\n    }\n}\n\nexport {BIMViewer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/BIMViewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "explorerTemplate",
    "memberof": "src/BIMViewer.js",
    "static": true,
    "longname": "src/BIMViewer.js~explorerTemplate",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/BIMViewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "toolbarTemplate",
    "memberof": "src/BIMViewer.js",
    "static": true,
    "longname": "src/BIMViewer.js~toolbarTemplate",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/BIMViewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "initTabs",
    "memberof": "src/BIMViewer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/BIMViewer.js~initTabs",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/BIMViewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "containerElement",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "BIMViewer",
    "memberof": "src/BIMViewer.js",
    "static": true,
    "longname": "src/BIMViewer.js~BIMViewer",
    "access": "public",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/BIMViewer.js",
    "importStyle": "{BIMViewer}",
    "description": "A BIM viewer based on the [xeokit SDK](http://xeokit.io).",
    "lineNumber": 142,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ]
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#constructor",
    "access": "public",
    "description": "Constructs a ViewerUI.",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "Data access strategy."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Configuration."
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "viewer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#viewer",
    "access": "public",
    "description": "The xeokit [Viewer](https://xeokit.github.io/xeokit-sdk/docs/class/src/viewer/Viewer.js~Viewer.html) at the core of this BIM viewer.",
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "Viewer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_explorerElement",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_explorerElement",
    "access": "private",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_busyModal",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_busyModal",
    "access": "private",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_modelsExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_modelsExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_objectsExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_objectsExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_classesExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_classesExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_storeysExplorer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_storeysExplorer",
    "access": "private",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_resetAction",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_resetAction",
    "access": "private",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_fitAction",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_fitAction",
    "access": "private",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_threeDMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_threeDMode",
    "access": "private",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_firstPersonMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_firstPersonMode",
    "access": "private",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_hideTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_hideTool",
    "access": "private",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_selectionTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_selectionTool",
    "access": "private",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_queryTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_queryTool",
    "access": "private",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_sectionTool",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_sectionTool",
    "access": "private",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_navCubeMode",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_navCubeMode",
    "access": "private",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_bcfViewpointsPlugin",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_bcfViewpointsPlugin",
    "access": "private",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_customizeViewer",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_customizeViewer",
    "access": "private",
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_initCanvasContextMenus",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_initCanvasContextMenus",
    "access": "private",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_canvasContextMenu",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_canvasContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 419,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_objectContextMenu",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#_objectContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getProjectsInfo",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getProjectsInfo",
    "access": "public",
    "description": "Gets information on all available projects.\n\n### Example\n\n````javascript\nmyViewer.getProjectsInfo((projectsInfo) => {\n     console.log(JSON.stringify(projectsInfo, null, \"\\t\"));\n});\n````\n\nReturns JSON similar to:\n\n````json\n{\n     \"projects\": [\n         {\n             \"id\": \"Duplex\",\n             \"name\": \"Duplex\"\n         },\n         {\n             \"id\": \"Schependomlaan\",\n             \"name\": \"Schependomlaan\"\n         },\n         {\n             \"id\": \"WestRiversideHospital\",\n             \"name\": \"West Riverside Hospital\"\n         }\n    ]\n}\n````",
    "lineNumber": 497,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success, into which the projects information JSON is passed."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "getProjectInfo",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getProjectInfo",
    "access": "public",
    "description": "Gets information on the given project.\n\nUse {@link BIMViewer#getProjects} to get information on all available projects.\n\n### Example\n\n````javascript\nmyViewer.getProjectInfo((\"Duplex\") => {\n     console.log(JSON.stringify(projectInfo, null, \"\\t\"));\n});\n````\n\nReturns JSON similar to:\n\n````json\n{\n     \"id\": \"Duplex\",\n     \"name\": \"Duplex\"\n}\n````",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project to get information on. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success, into which the project information JSON is passed."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "loadProject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadProject",
    "access": "public",
    "description": "Loads a project into the viewer.\n\nUnloads any currently loaded project and its models first. If the given project is already loaded, will unload that project first.",
    "lineNumber": 563,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": "ID of the project to load. Must be the ID of one of the projects in the information obtained by {@link BIMViewer#getProjects}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "unloadProject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unloadProject",
    "access": "public",
    "description": "Unloads whatever project is currently loaded.",
    "lineNumber": 584,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getLoadedProjectId",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getLoadedProjectId",
    "access": "public",
    "description": "Returns the ID of the currently loaded project, if any.",
    "lineNumber": 595,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} The ID of the currently loaded project, otherwise ````null```` if no project is currently loaded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The ID of the currently loaded project, otherwise ````null```` if no project is currently loaded."
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "loadModel",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadModel",
    "access": "public",
    "description": "Loads a model into the viewer.\n\nAssumes that the project containing the model is currently loaded.",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": "ID of the model to load. Must be the ID of one of the models in the currently loaded project."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on success."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Callback invoked on failure, into which the error message string is passed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getLoadedModelIds",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#getLoadedModelIds",
    "access": "public",
    "description": "Returns the IDs of the currently loaded models, if any.",
    "lineNumber": 631,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String[]} The IDs of the currently loaded models, otherwise an empty array if no models are currently loaded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "The IDs of the currently loaded models, otherwise an empty array if no models are currently loaded."
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "unLoadModel",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unLoadModel",
    "access": "public",
    "description": "Unloads a model from the viewer.\n\nDoes nothing if the model is not currently loaded.",
    "lineNumber": 642,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "unloadAllModels",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#unloadAllModels",
    "access": "public",
    "description": "Unloads all currently loaded models.",
    "lineNumber": 653,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "showObjectInObjectsTab",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showObjectInObjectsTab",
    "access": "public",
    "description": "Show the given object in the Objects tab.",
    "lineNumber": 661,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "showObjectInClassesTab",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showObjectInClassesTab",
    "access": "public",
    "description": "Show the given object in the Classes tab.",
    "lineNumber": 673,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "showObjectInStoreysTab",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showObjectInStoreysTab",
    "access": "public",
    "description": "",
    "lineNumber": 686,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "showObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showObject",
    "access": "public",
    "description": "Shows the object with the given ID.",
    "lineNumber": 698,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of object to show."
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "showAllObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showAllObjects",
    "access": "public",
    "description": "Shows all objects currently in the viewer.",
    "lineNumber": 714,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "showAllObjectsExceptFor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#showAllObjectsExceptFor",
    "access": "public",
    "description": "Shows all objects currently in the viewer, except for those with the given IDs.",
    "lineNumber": 722,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects to not show."
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "hideObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#hideObject",
    "access": "public",
    "description": "Hides the object with the given ID.",
    "lineNumber": 733,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of object to hide."
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "hideAllObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#hideAllObjects",
    "access": "public",
    "description": "Hides all objects currently in the viewer.",
    "lineNumber": 743,
    "params": [],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "hideAllObjectsExceptFor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#hideAllObjectsExceptFor",
    "access": "public",
    "description": "Hides all objects currently in the viewer, except for those with the given IDs.",
    "lineNumber": 751,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects to not hide."
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "flyToObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#flyToObject",
    "access": "public",
    "description": "flies the camera to fit the given object in view.",
    "lineNumber": 764,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "Callback invoked on completion"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "jumpToObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#jumpToObject",
    "access": "public",
    "description": "Jumps the camera to fit the given object in view.",
    "lineNumber": 806,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of the object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "xrayObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#xrayObject",
    "access": "public",
    "description": "X-ray the object with the given ID.",
    "lineNumber": 836,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of object to x-ray."
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "xrayAllObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#xrayAllObjects",
    "access": "public",
    "description": "X-rays all objects currently in the viewer.",
    "lineNumber": 852,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "xrayAllObjectsExceptFor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#xrayAllObjectsExceptFor",
    "access": "public",
    "description": "X-rays all objects currently in the viewer, except for those with the given IDs.",
    "lineNumber": 860,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects to not x-ray."
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "xrayNoObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#xrayNoObjects",
    "access": "public",
    "description": "Un-x-rays all objects currently in the viewer.",
    "lineNumber": 867,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "selectObject",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#selectObject",
    "access": "public",
    "description": "Selects the objects with the given ID.",
    "lineNumber": 875,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": "ID of object to select."
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "selectAllObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#selectAllObjects",
    "access": "public",
    "description": "Selects all objects currently in the viewer.",
    "lineNumber": 891,
    "params": [],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "selectAllObjectsExceptFor",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#selectAllObjectsExceptFor",
    "access": "public",
    "description": "Selects all objects currently in the viewer, except for those with the given IDs.",
    "lineNumber": 899,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": "IDs of objects to not select."
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "deselectAllObjects",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#deselectAllObjects",
    "access": "public",
    "description": "De-selects all objects currently in the viewer.",
    "lineNumber": 906,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "openTab",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#openTab",
    "access": "public",
    "description": "Opens the specified viewer tab.\n\nThe available tabs are:\n\n * \"models\" - the Models tab, which lists the models available within the currently loaded project,\n * \"objects\" - the Objects tab, which contains a tree view for each loaded model, organized to indicate the containment hierarchy of their objects,\n * \"classes\" - the Classes tab, which contains a tree view for each loaded model, with nodes grouped by IFC types of their objects, and\n * \"storeys\" - the Storeys tab, which contains a tree view for each loaded model, with nodes grouped within ````IfcBuildingStoreys````, sub-grouped by their IFC types.",
    "lineNumber": 922,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "tabId",
        "description": "ID of the tab to open - see method description."
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "saveBCFViewpoint",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#saveBCFViewpoint",
    "access": "public",
    "description": "Saves viewer state to a BCF viewpoint.\n\nThis does not save information about the project and model(s) that are currently loaded. When loading the viewpoint,\nthe viewer will assume that the same project and models will be currently loaded (the BCF viewpoint specification\ndoes not contain that information).\n\nNote that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\ndirection vector. Therefore, we save ````camera_direction```` as the vector from {@link Camera#eye} to {@link Camera#look}.",
    "examples": [
      "\nconst viewpoint = bimViewer.saveBCFViewpoint({\n    spacesVisible: false,          // Default\n    spaceBoundariesVisible: false, // Default\n    openingsVisible: false         // Default\n});\n\n// viewpoint will resemble the following:\n\n{\n    perspective_camera: {\n        camera_view_point: {\n            x: 0.0,\n            y: 0.0,\n            z: 0.0\n        },\n        camera_direction: {\n            x: 1.0,\n            y: 1.0,\n            z: 2.0\n        },\n        camera_up_vector: {\n            x: 0.0,\n            y: 0.0,\n            z: 1.0\n        },\n        field_of_view: 90.0\n    },\n    lines: [],\n    clipping_planes: [{\n        location: {\n            x: 0.5,\n            y: 0.5,\n            z: 0.5\n        },\n        direction: {\n            x: 1.0,\n            y: 0.0,\n            z: 0.0\n        }\n    }],\n    bitmaps: [],\n    snapshot: {\n        snapshot_type: png,\n        snapshot_data: \"data:image/png;base64,......\"\n    },\n    components: {\n        visibility: {\n            default_visibility: false,\n            exceptions: [{\n                ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\n                originating_system: xeokit.io,\n                authoring_tool_id: xeokit/v1.0\n            }]\n       },\n        selection: [{\n           ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\n        }]\n    }\n}"
    ],
    "lineNumber": 1036,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} BCF JSON viewpoint object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options for getting the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.spacesVisible",
        "description": "Indicates whether ````IfcSpace```` types should be forced visible in the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.openingsVisible",
        "description": "Indicates whether ````IfcOpening```` types should be forced visible in the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.spaceBoundariesVisible",
        "description": "Indicates whether the boundaries of ````IfcSpace```` types should be visible in the viewpoint."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "BCF JSON viewpoint object"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "loadBCFViewpoint",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#loadBCFViewpoint",
    "access": "public",
    "description": "Sets viewer state to the given BCF viewpoint.\n\nThis assumes that the viewer currently contains the same project and model(s) that were loaded at the time that the\nviewpoint was originally saved (the BCF viewpoint specification does not contain that information).\n\nNote that xeokit's {@link Camera#look} is the **point-of-interest**, whereas the BCF ````camera_direction```` is a\ndirection vector. Therefore, when loading a BCF viewpoint, we set {@link Camera#look} to the absolute position\nobtained by offsetting the BCF ````camera_view_point````  along ````camera_direction````.\n\nWhen loading a viewpoint, we also have the option to find {@link Camera#look} as the closest point of intersection\n(on the surface of any visible and pickable {@link Entity}) with a 3D ray fired from ````camera_view_point```` in\nthe direction of ````camera_direction````.",
    "lineNumber": 1062,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bcfViewpoint",
        "description": "BCF JSON viewpoint object or \"reset\" / \"RESET\" to reset the viewer, which clears SectionPlanes,\nshows default visible entities and restores camera to initial default position."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options for setting the viewpoint."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.rayCast",
        "description": "When ````true```` (default), will attempt to set {@link Camera#look} to the closest\npoint of surface intersection with a ray fired from the BCF ````camera_view_point```` in the direction of ````camera_direction````."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.immediate",
        "description": "When ````true```` (default), immediately set camera position."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.duration",
        "description": "Flight duration in seconds.  Overrides {@link CameraFlightAnimation#duration}."
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "resetView",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#resetView",
    "access": "public",
    "description": "Resets the view.",
    "lineNumber": 1073,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "setControlsEnabled",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#setControlsEnabled",
    "access": "public",
    "description": "Enables or disables the various buttons and controls throughout the viewer.\n\nThis also makes various buttons appear disabled.",
    "lineNumber": 1084,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether or not to disable the controls."
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/BIMViewer.js~BIMViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BIMViewer.js~BIMViewer#destroy",
    "access": "public",
    "description": "Destroys the viewer, freeing all resources.",
    "lineNumber": 1108,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/BusyModal.js",
    "content": "import {Controller} from \"./Controller.js\";\n\n/** @private */\nclass BusyModal extends Controller {\n\n    constructor(parent, cfg = {}) {\n\n        super(parent, cfg);\n\n        document.body.insertAdjacentHTML('beforeend', `<div class=\"xeokit-busy-modal\">\n            <div class=\"xeokit-busy-modal-content\">\n                <div class=\"xeokit-busy-modal-body\">\n              <div class=\"xeokit-busy-modal-message\">Default text</div>\n                </div>\n            </div>\n        </div>`);\n\n        this._modal = document.querySelector(\".xeokit-busy-modal\");\n    }\n\n    show(message) {\n        this._modalVisible = true;\n        document.querySelector('.xeokit-busy-modal-message').innerText = message;\n        this._modal.style.display = 'block';\n    }\n\n    hide() {\n        this._modalVisible = false;\n        this._modal.style.display = 'none';\n    }\n\n    destroy() {\n        super.destroy();\n        if (this._modal) {\n            this._modal.parentNode.removeChild(this._modal);\n            this._modal = null;\n        }\n    }\n}\n\nexport {BusyModal};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/BusyModal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "BusyModal",
    "memberof": "src/BusyModal.js",
    "static": true,
    "longname": "src/BusyModal.js~BusyModal",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/BusyModal.js",
    "importStyle": "{BusyModal}",
    "description": null,
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_modal",
    "memberof": "src/BusyModal.js~BusyModal",
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#_modal",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "show",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#show",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "_modalVisible",
    "memberof": "src/BusyModal.js~BusyModal",
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#_modalVisible",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "hide",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#hide",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/BusyModal.js~BusyModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/BusyModal.js~BusyModal#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/Controller.js",
    "content": "import {Map} from \"@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\";\nimport {utils} from \"@xeokit/xeokit-sdk/src/viewer/scene/utils.js\";\n\n/** @private */\nclass Controller {\n\n    /**\n     * @protected\n     */\n    constructor(parent, cfg, server, viewer) {\n\n        this.bimViewer = (parent ? (parent.bimViewer || parent) : this);\n        this.server = parent ? parent.server : server;\n        this.viewer = parent ? parent.viewer : viewer;\n\n        this._children = [];\n\n        if (parent) {\n            parent._children.push(this);\n        }\n\n        this._subIdMap = null; // Subscription subId pool\n        this._subIdEvents = null; // Subscription subIds mapped to event names\n        this._eventSubs = null; // Event names mapped to subscribers\n        this._events = null; // Maps names to events\n        this._eventCallDepth = 0; // Helps us catch stack overflows from recursive events\n\n        this._enabled = null; // Used by #setEnabled() and #getEnabled()\n        this._active = null; // Used by #setActive() and #getActive()\n    }\n\n    /**\n     * Fires an event on this Controller.\n     *\n     * @protected\n     *\n     * @param {String} event The event type name\n     * @param {Object} value The event parameters\n     * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers\n     */\n    fire(event, value, forget) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n        }\n        if (forget !== true) {\n            this._events[event] = value || true; // Save notification\n        }\n        const subs = this._eventSubs[event];\n        let sub;\n        if (subs) { // Notify subscriptions\n            for (const subId in subs) {\n                if (subs.hasOwnProperty(subId)) {\n                    sub = subs[subId];\n                    this._eventCallDepth++;\n                    if (this._eventCallDepth < 300) {\n                        sub.callback.call(sub.scope, value);\n                    } else {\n                        this.error(\"fire: potential stack overflow from recursive event '\" + event + \"' - dropping this event\");\n                    }\n                    this._eventCallDepth--;\n                }\n            }\n        }\n    }\n\n    /**\n     * Subscribes to an event on this Controller.\n     *\n     * The callback is be called with this component as scope.\n     *\n     * @param {String} event The event\n     * @param {Function} callback Called fired on the event\n     * @param {Object} [scope=this] Scope for the callback\n     * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n     */\n    on(event, callback, scope) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._subIdMap) {\n            this._subIdMap = new Map(); // Subscription subId pool\n        }\n        if (!this._subIdEvents) {\n            this._subIdEvents = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n        }\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = {};\n            this._eventSubs[event] = subs;\n        }\n        const subId = this._subIdMap.addItem(); // Create unique subId\n        subs[subId] = {\n            callback: callback,\n            scope: scope || this\n        };\n        this._subIdEvents[subId] = event;\n        const value = this._events[event];\n        if (value !== undefined) { // A publication exists, notify callback immediately\n            callback.call(scope || this, value);\n        }\n        return subId;\n    }\n\n    /**\n     * Cancels an event subscription that was previously made with {@link Controller#on} or {@link Controller#once}.\n     *\n     * @param {String} subId Subscription ID\n     */\n    off(subId) {\n        if (subId === undefined || subId === null) {\n            return;\n        }\n        if (!this._subIdEvents) {\n            return;\n        }\n        const event = this._subIdEvents[subId];\n        if (event) {\n            delete this._subIdEvents[subId];\n            const subs = this._eventSubs[event];\n            if (subs) {\n                delete subs[subId];\n            }\n            this._subIdMap.removeItem(subId); // Release subId\n        }\n    }\n\n    /**\n     * Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is handled.\n     *\n     * This is equivalent to calling {@link Controller#on}, and then calling {@link Controller#off} inside the callback function.\n     *\n     * @param {String} event Data event to listen to\n     * @param {Function} callback Called when fresh data is available at the event\n     * @param {Object} [scope=this] Scope for the callback\n     */\n    once(event, callback, scope) {\n        const self = this;\n        const subId = this.on(event,\n            function (value) {\n                self.off(subId);\n                callback.call(scope || this, value);\n            },\n            scope);\n    }\n\n    /**\n     * Logs a console debugging message for this Controller.\n     *\n     * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n     *\n     * @protected\n     *\n     * @param {String} message The message to log\n     */\n    log(message) {\n        message = \"[LOG] \" + message;\n        window.console.log(message);\n    }\n\n    /**\n     * Logs a warning for this Controller to the JavaScript console.\n     *\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n     *\n     * @protected\n     *\n     * @param {String} message The message to log\n     */\n    warn(message) {\n        message = \"[WARN] \" + message;\n        window.console.warn(message);\n    }\n\n    /**\n     * Logs an error for this Controller to the JavaScript console.\n     *\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n     *\n     * @protected\n     *\n     * @param {String} message The message to log\n     */\n    error(message) {\n        message = \"[ERROR] \" + message;\n        window.console.error(message);\n    }\n\n    _mutexActivation(controllers) {\n        const numControllers = controllers.length;\n        for (let i = 0; i < numControllers; i++) {\n            const controller = controllers[i];\n            controller.on(\"active\", (function () {\n                const _i = i;\n                return function (active) {\n                    if (!active) {\n                        return;\n                    }\n                    for (let j = 0; j < numControllers; j++) {\n                        if (j === _i) {\n                            continue;\n                        }\n                        controllers[j].setActive(false);\n                    }\n                };\n            })());\n        }\n    }\n\n    /**\n     * Enables or disables this Controller.\n     *\n     * Fires an \"enabled\" event on update.\n     *\n     * @protected\n     *\n     *\n     * @param {boolean} enabled Whether or not to enable.\n     */\n    setEnabled(enabled) {\n        if (this._enabled === enabled) {\n            return;\n        }\n        this._enabled = enabled;\n        this.fire(\"enabled\", this._enabled);\n    }\n\n    /**\n     * Gets whether or not this Controller is enabled.\n     *\n     * @protected\n     *\n     * @returns {boolean}\n     */\n    getEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Activates or deactivates this Controller.\n     *\n     * Fires an \"active\" event on update.\n     *\n     * @protected\n     *\n     * @param {boolean} active Whether or not to activate.\n     */\n    setActive(active) {\n        if (this._active === active) {\n            return;\n        }\n        this._active = active;\n        this.fire(\"active\", this._active);\n    }\n\n    /**\n     * Gets whether or not this Controller is active.\n     *\n     * @protected\n     *\n     * @returns {boolean}\n     */\n    getActive() {\n        return this._active;\n    }\n\n    /**\n     * Destroys this Controller.\n     *\n     * @protected\n     *\n     */\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        /**\n         * Fired when this Controller is destroyed.\n         * @event destroyed\n         */\n        this.fire(\"destroyed\", this.destroyed = true);\n        this._subIdMap = null;\n        this._subIdEvents = null;\n        this._eventSubs = null;\n        this._events = null;\n        this._eventCallDepth = 0;\n        for (let i = 0, len = this._children.length; i < len; i++) {\n            this._children.destroy();\n        }\n        this._children = [];\n    }\n}\n\nexport {Controller};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/Controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Controller",
    "memberof": "src/Controller.js",
    "static": true,
    "longname": "src/Controller.js~Controller",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/Controller.js",
    "importStyle": "{Controller}",
    "description": null,
    "lineNumber": 5,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#constructor",
    "access": "protected",
    "description": "",
    "lineNumber": 10,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "bimViewer",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#bimViewer",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "server",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#server",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "viewer",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_children",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_children",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_subIdMap",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_subIdMap",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "_subIdEvents",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_subIdEvents",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "_eventSubs",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_eventSubs",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "_events",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_events",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_eventCallDepth",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_eventCallDepth",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "_enabled",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_enabled",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "_active",
    "memberof": "src/Controller.js~Controller",
    "static": false,
    "longname": "src/Controller.js~Controller#_active",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "fire",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#fire",
    "access": "protected",
    "description": "Fires an event on this Controller.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event type name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The event parameters"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forget",
        "description": "When true, does not retain for subsequent subscribers"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "on",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#on",
    "access": "public",
    "description": "Subscribes to an event on this Controller.\n\nThe callback is be called with this component as scope.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called fired on the event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "scope",
        "description": "Scope for the callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Handle to the subscription, which may be used to unsubscribe with {@link #off}."
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "off",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#off",
    "access": "public",
    "description": "Cancels an event subscription that was previously made with {@link Controller#on} or {@link Controller#once}.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subId",
        "description": "Subscription ID"
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "once",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#once",
    "access": "public",
    "description": "Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is handled.\n\nThis is equivalent to calling {@link Controller#on}, and then calling {@link Controller#off} inside the callback function.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Data event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called when fresh data is available at the event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "scope",
        "description": "Scope for the callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "log",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#log",
    "access": "protected",
    "description": "Logs a console debugging message for this Controller.\n\nThe console message will have this format: *````[LOG] [<component type> <component id>: <message>````*",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "warn",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#warn",
    "access": "protected",
    "description": "Logs a warning for this Controller to the JavaScript console.\n\nThe console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "error",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#error",
    "access": "protected",
    "description": "Logs an error for this Controller to the JavaScript console.\n\nThe console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "_mutexActivation",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#_mutexActivation",
    "access": "private",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "controllers",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#setEnabled",
    "access": "protected",
    "description": "Enables or disables this Controller.\n\nFires an \"enabled\" event on update.",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether or not to enable."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "getEnabled",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#getEnabled",
    "access": "protected",
    "description": "Gets whether or not this Controller is enabled.",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "setActive",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#setActive",
    "access": "protected",
    "description": "Activates or deactivates this Controller.\n\nFires an \"active\" event on update.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": "Whether or not to activate."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "getActive",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#getActive",
    "access": "protected",
    "description": "Gets whether or not this Controller is active.",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Controller.js~Controller#destroy",
    "access": "protected",
    "description": "Destroys this Controller.",
    "lineNumber": 278,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/IFCObjectDefaults/IFCObjectDefaults.js",
    "content": "/**\n * @desc Default initial properties for {@link Entity}s loaded from models accompanied by metadata.\n *\n * When loading a model, a loader plugins such as {@link GLTFLoaderPlugin} and {@link BIMServerLoaderPlugin} create\n * a tree of {@link Entity}s that represent the model. These loaders can optionally load metadata, to create\n * a {@link MetaModel} corresponding to the root {@link Entity}, with a {@link MetaObject} corresponding to each\n * object {@link Entity} within the tree.\n *\n * @private\n * @type {{String:Object}}\n */\nconst IFCObjectDefaults = {\n    IfcSpace: { // IfcSpace elements should be visible and pickable\n        visible: true,\n        pickable: true,\n        opacity: 0.2\n    },\n    IfcWindow: { // Some IFC models have opaque IfcWindow elements(!)\n        pickable: true,\n        opacity: 0.5\n    },\n    IfcOpeningElement: { // These tend to obscure windows\n        visible: false\n    },\n    IfcPlate: { // These tend to be windows(!)\n        colorize: [0.8470588235, 0.427450980392, 0, 0.5],\n        opacity: 0.5\n    }\n};\n\nexport {IFCObjectDefaults};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/IFCObjectDefaults/IFCObjectDefaults.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "IFCObjectDefaults",
    "memberof": "src/IFCObjectDefaults/IFCObjectDefaults.js",
    "static": true,
    "longname": "src/IFCObjectDefaults/IFCObjectDefaults.js~IFCObjectDefaults",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/IFCObjectDefaults/IFCObjectDefaults.js",
    "importStyle": "{IFCObjectDefaults}",
    "description": "Default initial properties for {@link Entity}s loaded from models accompanied by metadata.\n\nWhen loading a model, a loader plugins such as {@link GLTFLoaderPlugin} and {@link BIMServerLoaderPlugin} create\na tree of {@link Entity}s that represent the model. These loaders can optionally load metadata, to create\na {@link MetaModel} corresponding to the root {@link Entity}, with a {@link MetaObject} corresponding to each\nobject {@link Entity} within the tree.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/ViewerUI.js",
    "content": "import {BIMViewer} from \"./BIMViewer.js\";\n\n/**\n * @desc Alias class for {@link BIMViewer}, for backwards compatibility.\n * @private\n */\nclass ViewerUI extends BIMViewer {\n    constructor(server, cfg = {}) {\n        super(server, cfg);\n\n    }\n}\n\nexport {ViewerUI};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/ViewerUI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "ViewerUI",
    "memberof": "src/ViewerUI.js",
    "static": true,
    "longname": "src/ViewerUI.js~ViewerUI",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/ViewerUI.js",
    "importStyle": "{ViewerUI}",
    "description": "Alias class for {@link BIMViewer}, for backwards compatibility.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/BIMViewer.js~BIMViewer"
    ],
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ViewerUI.js~ViewerUI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ViewerUI.js~ViewerUI#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/contextMenuItems/CanvasContextMenuItems.js",
    "content": "import {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\n/**\n * ContextMenu items for when user right-clicks on empty canvas space.\n * @private\n */\nconst CanvasContextMenuItems = [\n    [\n        {\n            title: \"Hide all\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsVisible(context.viewer.scene.visibleObjectIds, false);\n            }\n        },\n        {\n            title: \"Show all\",\n            callback: function (context) {\n                const scene = context.viewer.scene;\n                scene.setObjectsVisible(scene.objectIds, true);\n            }\n        }\n    ],\n    [\n        {\n            title: \"View fit all\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const sceneAABB = scene.getAABB(scene.visibleObjectIds);\n                viewer.cameraFlight.flyTo({\n                    aabb: sceneAABB,\n                    duration: 0.5\n                });\n                viewer.cameraControl.pivotPos = math.getAABB3Center(sceneAABB);\n            }\n        }\n    ],\n    [\n        {\n            title: \"X-ray all\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsXRayed(context.viewer.scene.objectIds, true);\n            }\n        },\n        {\n            title: \"Reset X-ray\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsXRayed(context.viewer.scene.xrayedObjectIds, false);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Reset selection\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsSelected(context.viewer.scene.selectedObjectIds, false);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Reset view\",\n            callback: function (context) {\n                context.bimViewer.resetView();\n            }\n        }\n    ]\n];\n\nexport {CanvasContextMenuItems};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/contextMenuItems/CanvasContextMenuItems.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "CanvasContextMenuItems",
    "memberof": "src/contextMenuItems/CanvasContextMenuItems.js",
    "static": true,
    "longname": "src/contextMenuItems/CanvasContextMenuItems.js~CanvasContextMenuItems",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/contextMenuItems/CanvasContextMenuItems.js",
    "importStyle": "{CanvasContextMenuItems}",
    "description": "ContextMenu items for when user right-clicks on empty canvas space.",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/contextMenuItems/ObjectContextMenuItems.js",
    "content": "import {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\n/**\n * ContextMenu items for when user right-clicks on an object.\n * @private\n */\nconst ObjectContextMenuItems = [\n    [\n        {\n            title: \"View fit\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const entity = context.entity;\n                viewer.cameraFlight.flyTo({\n                    aabb: entity.aabb,\n                    duration: 0.5\n                }, () => {\n                    setTimeout(function () {\n                        scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n                    }, 500);\n                });\n                viewer.cameraControl.pivotPos = math.getAABB3Center(entity.aabb);\n            }\n        },\n        {\n            title: \"View fit all\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const sceneAABB = scene.getAABB(scene.visibleObjectIds);\n                viewer.cameraFlight.flyTo({\n                    aabb: sceneAABB,\n                    duration: 0.5\n                });\n                viewer.cameraControl.pivotPos = math.getAABB3Center(sceneAABB);\n            }\n        },\n        {\n            title: \"Show in tree\",\n            callback: function (context) {\n                const objectId = context.entity.id;\n                context.showNodeInTreeViews(objectId);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Hide\",\n            callback: function (context) {\n                context.entity.visible = false;\n            }\n        },\n        {\n            title: \"Hide others\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const entity = context.entity;\n                const metaObject = viewer.metaScene.metaObjects[entity.id];\n                if (!metaObject) {\n                    return;\n                }\n                scene.setObjectsVisible(scene.visibleObjectIds, false);\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n                metaObject.withMetaObjectsInSubtree((metaObject) => {\n                    const entity = scene.objects[metaObject.id];\n                    if (entity) {\n                        entity.visible = true;\n                    }\n                });\n            }\n        },\n        {\n            title: \"Hide all\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsVisible(context.viewer.scene.visibleObjectIds, false);\n            }\n        },\n        {\n            title: \"Show all \",\n            callback: function (context) {\n                const scene = context.viewer.scene;\n                scene.setObjectsVisible(scene.objectIds, true);\n            }\n        }\n    ],\n    [\n        {\n            title: \"X-ray\",\n            callback: function (context) {\n                context.entity.xrayed = true;\n            }\n        },\n        {\n            title: \"Don't X-ray\",\n            callback: function (context) {\n                context.entity.xrayed = false;\n            }\n        },\n        {\n            title: \"X-ray others\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const entity = context.entity;\n                const metaObject = viewer.metaScene.metaObjects[entity.id];\n                if (!metaObject) {\n                    return;\n                }\n                scene.setObjectsVisible(scene.objectIds, true);\n                scene.setObjectsXRayed(scene.objectIds, true);\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n                metaObject.withMetaObjectsInSubtree((metaObject) => {\n                    const entity = scene.objects[metaObject.id];\n                    if (entity) {\n                        entity.xrayed = false;\n                    }\n                });\n            }\n        },\n        {\n            title: \"X-ray all\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsXRayed(context.viewer.scene.objectIds, true);\n            }\n        },\n        {\n            title: \"Reset X-ray\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsXRayed(context.viewer.scene.xrayedObjectIds, false);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Select\",\n            callback: function (context) {\n                context.entity.selected = true;\n            }\n        },\n        {\n            title: \"Deselect\",\n            callback: function (context) {\n                context.entity.selected = false;\n            }\n        },\n        {\n            title: \"Reset selection\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsSelected(context.viewer.scene.selectedObjectIds, false);\n            }\n        }\n    ]\n];\n\nexport {ObjectContextMenuItems};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/contextMenuItems/ObjectContextMenuItems.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "ObjectContextMenuItems",
    "memberof": "src/contextMenuItems/ObjectContextMenuItems.js",
    "static": true,
    "longname": "src/contextMenuItems/ObjectContextMenuItems.js~ObjectContextMenuItems",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/contextMenuItems/ObjectContextMenuItems.js",
    "importStyle": "{ObjectContextMenuItems}",
    "description": "ContextMenu items for when user right-clicks on an object.",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/contextMenuItems/TreeViewContextMenuItems.js",
    "content": "import {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\n/**\n * ContextMenu items for when user right-clicks on a TreeViewPlugin node.\n * @private\n */\nconst TreeViewContextMenuItems = [\n    [\n        {\n            title: \"View fit\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const objectIds = [];\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        objectIds.push(treeViewNode.objectId);\n                    }\n                });\n                scene.setObjectsVisible(objectIds, true);\n                scene.setObjectsHighlighted(objectIds, true);\n                const aabb = scene.getAABB(objectIds);\n                viewer.cameraFlight.flyTo({\n                    aabb: aabb,\n                    duration: 0.5\n                }, () => {\n                    setTimeout(function () {\n                        scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n                    }, 500);\n                });\n                viewer.cameraControl.pivotPos = math.getAABB3Center(aabb);\n            }\n        },\n        {\n            title: \"View fit all\",\n            callback: function (context) {\n                const viewer = context.viewer;\n                const scene = viewer.scene;\n                const sceneAABB = scene.getAABB(scene.visibleObjectIds);\n                viewer.cameraFlight.flyTo({\n                    aabb: sceneAABB,\n                    duration: 0.5\n                });\n                viewer.cameraControl.pivotPos = math.getAABB3Center(sceneAABB);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Hide\",\n            callback: function (context) {\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = context.viewer.scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.visible = false;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Hide others\",\n            callback: function (context) {\n                const scene = context.viewer.scene;\n                scene.setObjectsVisible(scene.visibleObjectIds, false);\n                scene.setObjectsXRayed(scene.xrayedObjectIds, false);\n                scene.setObjectsSelected(scene.selectedObjectIds, false);\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.visible = true;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Hide all\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsVisible(context.viewer.scene.visibleObjectIds, false);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Show\",\n            callback: function (context) {\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = context.viewer.scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.visible = true;\n                            entity.xrayed = false;\n                            entity.selected = false;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Show others\",\n            callback: function (context) {\n                const scene = context.viewer.scene;\n                scene.setObjectsVisible(scene.objectIds, true);\n                scene.setObjectsXRayed(scene.xrayedObjectIds, false);\n                scene.setObjectsSelected(scene.selectedObjectIds, false);\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.visible = false;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Show all\",\n            callback: function (context) {\n                const scene = context.viewer.scene;\n                scene.setObjectsVisible(scene.objectIds, true);\n                scene.setObjectsXRayed(scene.xrayedObjectIds, false);\n                scene.setObjectsSelected(scene.selectedObjectIds, false);\n            }\n        }\n    ],\n    [\n        {\n            title: \"X-ray\",\n            callback: function (context) {\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = context.viewer.scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.xrayed = true;\n                            entity.visible = true;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Don't X-ray\",\n            callback: function (context) {\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = context.viewer.scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.xrayed = false;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"X-ray others\",\n            callback: function (context) {\n                const scene = context.viewer.scene;\n                scene.setObjectsVisible(scene.objectIds, true);\n                scene.setObjectsXRayed(scene.objectIds, true);\n                scene.setObjectsHighlighted(scene.highlightedObjectIds, false);\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.xrayed = false;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"X-ray all\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsXRayed(context.viewer.scene.objectIds, true);\n            }\n        },\n        {\n            title: \"Reset X-ray\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsXRayed(context.viewer.scene.xrayedObjectIds, false);\n            }\n        }\n    ],\n    [\n        {\n            title: \"Select\",\n            callback: function (context) {\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = context.viewer.scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.selected = true;\n                            entity.visible = true;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Deselect\",\n            callback: function (context) {\n                context.treeViewPlugin.withNodeTree(context.treeViewNode, (treeViewNode) => {\n                    if (treeViewNode.objectId) {\n                        const entity = context.viewer.scene.objects[treeViewNode.objectId];\n                        if (entity) {\n                            entity.selected = false;\n                        }\n                    }\n                });\n            }\n        },\n        {\n            title: \"Reset Selection\",\n            callback: function (context) {\n                context.viewer.scene.setObjectsSelected(context.viewer.scene.selectedObjectIds, false);\n            }\n        }\n    ]\n];\n\nexport {TreeViewContextMenuItems};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/contextMenuItems/TreeViewContextMenuItems.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "TreeViewContextMenuItems",
    "memberof": "src/contextMenuItems/TreeViewContextMenuItems.js",
    "static": true,
    "longname": "src/contextMenuItems/TreeViewContextMenuItems.js~TreeViewContextMenuItems",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/contextMenuItems/TreeViewContextMenuItems.js",
    "importStyle": "{TreeViewContextMenuItems}",
    "description": "ContextMenu items for when user right-clicks on a TreeViewPlugin node.",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/explorer/ClassesExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {TreeViewPlugin} from \"@xeokit/xeokit-sdk/src/plugins/TreeViewPlugin/TreeViewPlugin.js\";\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\nimport {TreeViewContextMenuItems} from \"../contextMenuItems/TreeViewContextMenuItems.js\";\n\n/** @private */\nclass ClassesExplorer extends Controller {\n\n    constructor(parent, cfg = {}) {\n\n        super(parent);\n\n        if (!cfg.classesTabElement) {\n            throw \"Missing config: classesTabElement\";\n        }\n\n        if (!cfg.showAllClassesButtonElement) {\n            throw \"Missing config: showAllClassesButtonElement\";\n        }\n\n        if (!cfg.hideAllClassesButtonElement) {\n            throw \"Missing config: hideAllClassesButtonElement\";\n        }\n\n        if (!cfg.classesElement) {\n            throw \"Missing config: classesElement\";\n        }\n\n        this._classesTabElement = cfg.classesTabElement;\n        this._showAllClassesButtonElement = cfg.showAllClassesButtonElement;\n        this._hideAllClassesButtonElement = cfg.hideAllClassesButtonElement;\n        this._classesTabButtonElement = this._classesTabElement.querySelector(\".xeokit-tab-btn\");\n\n        if (!this._classesTabButtonElement) {\n            throw \"Missing DOM element: xeokit-tab-btn\";\n        }\n\n        const classesElement = cfg.classesElement;\n\n        this._treeView = new TreeViewPlugin(this.viewer, {\n            containerElement: classesElement,\n            hierarchy: \"types\",\n            autoAddModels: false\n        });\n\n        this._treeViewContextMenu = new ContextMenu({\n            items: TreeViewContextMenuItems\n        });\n\n        this._treeView.on(\"contextmenu\", (e) => {\n            this._treeViewContextMenu.show(e.event.pageX, e.event.pageY);\n            this._treeViewContextMenu.context = {\n                viewer: e.viewer,\n                treeViewPlugin: e.treeViewPlugin,\n                treeViewNode: e.treeViewNode\n            };\n        });\n\n        this._onModelLoaded = this.viewer.scene.on(\"modelLoaded\", (modelId) =>{\n            if (this.viewer.metaScene.metaModels[modelId]) {\n                const modelInfo = this.bimViewer._modelsExplorer.getModelInfo(modelId);\n                if (!modelInfo) {\n                    return;\n                }\n                this._treeView.addModel(modelId, {\n                    rootName: modelInfo.name\n                });\n            }\n        });\n\n        this._onModelUnloaded = this.viewer.scene.on(\"modelUnloaded\", (modelId) => {\n            if (this.viewer.metaScene.metaModels[modelId]) {\n                this._treeView.removeModel(modelId);\n            }\n        });\n\n        this.bimViewer.on(\"reset\", () => {\n            this._treeView.collapse();\n        });\n    }\n\n    setEnabled(enabled) {\n        if (!enabled) {\n            this._classesTabButtonElement.classList.add(\"disabled\");\n            this._showAllClassesButtonElement.classList.add(\"disabled\");\n            this._hideAllClassesButtonElement.classList.add(\"disabled\");\n        } else {\n            this._classesTabButtonElement.classList.remove(\"disabled\");\n            this._showAllClassesButtonElement.classList.remove(\"disabled\");\n            this._hideAllClassesButtonElement.classList.remove(\"disabled\");\n        }\n    }\n\n    showNodeInTreeView(objectId) {\n        this._treeView.collapse();\n        this._treeView.showNode(objectId);\n    }\n\n    destroy() {\n        super.destroy();\n        this._treeView.destroy();\n        this._treeViewContextMenu.destroy();\n        this.viewer.scene.off(this._onModelLoaded);\n        this.viewer.scene.off(this._onModelUnloaded);\n    }\n}\n\nexport {ClassesExplorer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/explorer/ClassesExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "ClassesExplorer",
    "memberof": "src/explorer/ClassesExplorer.js",
    "static": true,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/explorer/ClassesExplorer.js",
    "importStyle": "{ClassesExplorer}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "_classesTabElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_classesTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "_showAllClassesButtonElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_showAllClassesButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "_hideAllClassesButtonElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_hideAllClassesButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "_classesTabButtonElement",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_classesTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "_treeView",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_treeView",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "_treeViewContextMenu",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_treeViewContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_onModelLoaded",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_onModelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_onModelUnloaded",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#_onModelUnloaded",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "showNodeInTreeView",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#showNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/ClassesExplorer.js~ClassesExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ClassesExplorer.js~ClassesExplorer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/explorer/ModelsExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {XKTLoaderPlugin} from \"@xeokit/xeokit-sdk/src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\nimport {IFCObjectDefaults} from \"../IFCObjectDefaults/IFCObjectDefaults.js\";\n\nconst tempVec3 = math.vec3();\n\n/** @private */\nclass ModelsExplorer extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.modelsTabElement) {\n            throw \"Missing config: modelsTabElement\";\n        }\n\n        if (!cfg.unloadModelsButtonElement) {\n            throw \"Missing config: unloadModelsButtonElement\";\n        }\n\n        if (!cfg.modelsElement) {\n            throw \"Missing config: modelsElement\";\n        }\n\n        this._modelsTabElement = cfg.modelsTabElement;\n        this._unloadModelsButtonElement = cfg.unloadModelsButtonElement;\n        this._modelsElement = cfg.modelsElement;\n        this._modelsTabButtonElement = this._modelsTabElement.querySelector(\".xeokit-tab-btn\");\n\n        if (!this._modelsTabButtonElement) {\n            throw \"Missing DOM element: ,xeokit-tab-btn\";\n        }\n\n        this._xktLoader = new XKTLoaderPlugin(this.viewer, {\n            objectDefaults: IFCObjectDefaults\n        });\n        this._modelsInfo = {};\n        this._numModelsLoaded = 0;\n        this._projectId = null;\n    }\n\n    loadProject(projectId, done, error) {\n        this.server.getProject(projectId, (projectInfo) => {\n            this.unloadProject();\n            this._projectId = projectId;\n            var html = \"\";\n            const modelsInfo = projectInfo.models || [];\n            this._modelsInfo = {};\n            for (let i = 0, len = modelsInfo.length; i < len; i++) {\n                const modelInfo = modelsInfo[i];\n                this._modelsInfo[modelInfo.id] = modelInfo;\n                html += \"<div class='xeokit-form-check'>\";\n                html += \"<input id='\" + modelInfo.id + \"' type='checkbox' value=''>\" + modelInfo.name;\n                html += \"</div>\";\n            }\n            this._modelsElement.innerHTML = html;\n            for (let i = 0, len = modelsInfo.length; i < len; i++) {\n                const modelInfo = modelsInfo[i];\n                const modelId = modelInfo.id;\n                const checkBox = document.getElementById(\"\" + modelId);\n                checkBox.addEventListener(\"click\", () => {\n                    if (checkBox.checked) {\n                        this.loadModel(modelId);\n                    } else {\n                        this.unloadModel(modelInfo.id);\n                    }\n                });\n                if (modelInfo.default) {\n                    checkBox.checked = true;\n                    this.loadModel(modelId, done, error); // TODO: buffer and load at end\n                } else {\n                    if (done) {\n                        done();\n                    }\n                }\n            }\n        }, (errMsg) => {\n            this.error(errMsg);\n            if (error) {\n                error(errMsg);\n            }\n        });\n    }\n\n    unloadProject() {\n        if (!this._projectId) {\n            return;\n        }\n        const models = this.viewer.scene.models;\n        for (var modelId in models) {\n            if (models.hasOwnProperty(modelId)) {\n                const model = models[modelId];\n                model.destroy();\n            }\n        }\n        this._modelsElement.innerHTML = \"\";\n        this._numModelsLoaded = 0;\n        this._unloadModelsButtonElement.classList.add(\"disabled\");\n        const lastProjectId = this._projectId;\n        this._projectId = null;\n        this.fire(\"projectUnloaded\", {\n            projectId: lastProjectId\n        });\n    }\n\n    getLoadedProjectId() {\n        return this._projectId;\n    }\n\n    loadModel(modelId, done, error) {\n        if (!this._projectId) {\n            if (error) {\n                error(\"No project currently loaded\");\n            }\n            return;\n        }\n        const modelInfo = this._modelsInfo[modelId];\n        if (!modelInfo) {\n            if (error) {\n                error(\"Model not in currently loaded project\");\n            }\n            return;\n        }\n        this.bimViewer._busyModal.show(\"Loading \" + modelInfo.name);\n        this.server.getMetadata(this._projectId, modelId,\n            (json) => {\n                this.server.getGeometry(this._projectId, modelId,\n                    (arraybuffer) => {\n                        const model = this._xktLoader.load({\n                            id: modelId,\n                            metaModelData: json,\n                            xkt: arraybuffer,\n                            excludeUnclassifiedObjects: true,\n                            edges: true,\n                            position: modelInfo.position,\n                            scale: modelInfo.scale,\n                            rotation: modelInfo.rotation,\n                            matrix: modelInfo.matrix\n                        });\n                        model.on(\"loaded\", () => {\n                            const scene = this.viewer.scene;\n                            const aabb = scene.getAABB(scene.visibleObjectIds);\n                            this._numModelsLoaded++;\n                            this._unloadModelsButtonElement.classList.remove(\"disabled\");\n                            if (this._numModelsLoaded === 1) { // Jump camera when only one model\n                                this.viewer.cameraFlight.jumpTo({\n                                    aabb: aabb\n                                });\n                                this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\n                                this.fire(\"modelLoaded\", modelId);\n                                this.bimViewer._busyModal.hide();\n                                if (done) {\n                                    done();\n                                }\n                            } else { // Fly camera when multiple models\n                                this.viewer.cameraFlight.flyTo({\n                                    aabb: aabb\n                                }, () => {\n                                    this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\n                                    this.fire(\"modelLoaded\", modelId);\n                                    this.bimViewer._busyModal.hide();\n                                    if (done) {\n                                        done();\n                                    }\n                                });\n                            }\n                        });\n                    },\n                    (errMsg) => {\n                        this.error(errMsg);\n                        this.bimViewer._busyModal.hide();\n                    });\n            },\n            (errMsg) => {\n                this.error(errMsg);\n                this.bimViewer._busyModal.hide();\n            });\n    }\n\n    unloadModel(modelId) {\n        const model = this.viewer.scene.models[modelId];\n        if (!model) {\n            this.error(\"Model not loaded: \" + modelId);\n            return;\n        }\n        model.destroy();\n        const scene = this.viewer.scene;\n        const aabb = scene.getAABB(scene.visibleObjectIds);\n        document.getElementById(\"\" + modelId).checked = false;\n        this._numModelsLoaded--;\n        if (this._numModelsLoaded > 0) {\n            this._unloadModelsButtonElement.classList.remove(\"disabled\");\n        } else {\n            this._unloadModelsButtonElement.classList.add(\"disabled\");\n        }\n        this.viewer.cameraFlight.flyTo({\n            aabb: aabb\n        }, () => {\n            this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\n            this.fire(\"modelUnloaded\", modelId);\n        });\n    }\n\n    unloadAllModels() {\n        const models = this.viewer.scene.models;\n        const modelIds = Object.keys(models);\n        for (var i = 0, len = modelIds.length; i < len; i++) {\n            const modelId = modelIds[i];\n            this.unloadModel(modelId);\n        }\n    }\n\n    getNumModelsLoaded() {\n        return this._numModelsLoaded;\n    }\n\n    _getLoadedModelIds() {\n        return Object.keys(this.viewer.scene.models);\n    }\n\n    getModelsInfo() {\n        return this._modelsInfo;\n    }\n\n    getModelInfo(modelId) {\n        return this._modelsInfo[modelId];\n    }\n\n    setEnabled(enabled) {\n        if (!enabled) {\n            this._modelsTabButtonElement.classList.add(\"disabled\");\n            this._unloadModelsButtonElement.classList.add(\"disabled\");\n        } else {\n            this._modelsTabButtonElement.classList.remove(\"disabled\");\n            this._unloadModelsButtonElement.classList.remove(\"disabled\");\n        }\n    }\n\n    /** @private */\n    destroy() {\n        super.destroy();\n        this._xktLoader.destroy();\n    }\n}\n\nexport {ModelsExplorer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/explorer/ModelsExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/explorer/ModelsExplorer.js",
    "static": true,
    "longname": "src/explorer/ModelsExplorer.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/explorer/ModelsExplorer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "ModelsExplorer",
    "memberof": "src/explorer/ModelsExplorer.js",
    "static": true,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/explorer/ModelsExplorer.js",
    "importStyle": "{ModelsExplorer}",
    "description": null,
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_modelsTabElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_unloadModelsButtonElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_unloadModelsButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "_modelsElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsElement",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_modelsTabButtonElement",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_xktLoader",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_xktLoader",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_modelsInfo",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_modelsInfo",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "_numModelsLoaded",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_numModelsLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_projectId",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_projectId",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "loadProject",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#loadProject",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "projectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "unloadProject",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#unloadProject",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "getLoadedProjectId",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getLoadedProjectId",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "loadModel",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#loadModel",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "unloadModel",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#unloadModel",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "unloadAllModels",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#unloadAllModels",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getNumModelsLoaded",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getNumModelsLoaded",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_getLoadedModelIds",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#_getLoadedModelIds",
    "access": "private",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "getModelsInfo",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getModelsInfo",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "getModelInfo",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#getModelInfo",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/ModelsExplorer.js~ModelsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ModelsExplorer.js~ModelsExplorer#destroy",
    "access": "private",
    "description": null,
    "lineNumber": 242,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/explorer/ObjectsExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {TreeViewPlugin} from \"@xeokit/xeokit-sdk/src/plugins/TreeViewPlugin/TreeViewPlugin.js\";\nimport {TreeViewContextMenuItems} from \"../contextMenuItems/TreeViewContextMenuItems.js\";\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\n\n/** @private */\nclass ObjectsExplorer extends Controller {\n\n    constructor(parent, cfg = {}) {\n\n        super(parent);\n\n        if (!cfg.objectsTabElement) {\n            throw \"Missing config: objectsTabElement\";\n        }\n\n        if (!cfg.showAllObjectsButtonElement) {\n            throw \"Missing config: showAllObjectsButtonElement\";\n        }\n\n        if (!cfg.hideAllObjectsButtonElement) {\n            throw \"Missing config: hideAllObjectsButtonElement\";\n        }\n\n        if (!cfg.objectsElement) {\n            throw \"Missing config: objectsElement\";\n        }\n\n        this._objectsTabElement = cfg.objectsTabElement;\n        this._showAllObjectsButtonElement = cfg.showAllObjectsButtonElement;\n        this._hideAllObjectsButtonElement = cfg.hideAllObjectsButtonElement;\n        this._objectsTabButtonElement = this._objectsTabElement.querySelector(\".xeokit-tab-btn\");\n\n        if (!this._objectsTabButtonElement) {\n            throw \"Missing DOM element: ,xeokit-tab-btn\";\n        }\n\n        const objectsElement = cfg.objectsElement;\n\n        this._treeView = new TreeViewPlugin(this.viewer, {\n            containerElement: objectsElement,\n            hierarchy: \"containment\",\n            autoAddModels: false\n        });\n\n        this._treeViewContextMenu = new ContextMenu({\n            items: TreeViewContextMenuItems\n        });\n\n        this._treeView.on(\"contextmenu\", (e) => {\n            this._treeViewContextMenu.show(e.event.pageX, e.event.pageY);\n            this._treeViewContextMenu.context = {\n                viewer: e.viewer,\n                treeViewPlugin: e.treeViewPlugin,\n                treeViewNode: e.treeViewNode\n            };\n        });\n\n        this._onModelLoaded = this.viewer.scene.on(\"modelLoaded\", (modelId) => {\n            if (this.viewer.metaScene.metaModels[modelId]) {\n                const modelInfo = this.bimViewer._modelsExplorer.getModelInfo(modelId);\n                if (!modelInfo) {\n                    return;\n                }\n                this._treeView.addModel(modelId, {\n                    rootName: modelInfo.name\n                });\n            }\n        });\n\n        this._onModelUnloaded = this.viewer.scene.on(\"modelUnloaded\", (modelId) => {\n            if (this.viewer.metaScene.metaModels[modelId]) {\n                this._treeView.removeModel(modelId);\n            }\n        });\n\n        this.bimViewer.on(\"reset\", ()=>{\n            this._treeView.collapse();\n        });\n    }\n\n    setEnabled(enabled) {\n        if (!enabled) {\n            this._objectsTabButtonElement.classList.add(\"disabled\");\n            this._showAllObjectsButtonElement.classList.add(\"disabled\");\n            this._hideAllObjectsButtonElement.classList.add(\"disabled\");\n        } else {\n            this._objectsTabButtonElement.classList.remove(\"disabled\");\n            this._showAllObjectsButtonElement.classList.remove(\"disabled\");\n            this._hideAllObjectsButtonElement.classList.remove(\"disabled\");\n        }\n    }\n\n    showNodeInTreeView(objectId) {\n        this._treeView.collapse();\n        this._treeView.showNode(objectId);\n    }\n\n    destroy() {\n        super.destroy();\n        this._treeView.destroy();\n        this._treeViewContextMenu.destroy();\n        this.viewer.scene.off(this._onModelLoaded);\n        this.viewer.scene.off(this._onModelUnloaded);\n    }\n}\n\nexport {ObjectsExplorer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/explorer/ObjectsExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "ObjectsExplorer",
    "memberof": "src/explorer/ObjectsExplorer.js",
    "static": true,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/explorer/ObjectsExplorer.js",
    "importStyle": "{ObjectsExplorer}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_objectsTabElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_objectsTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_showAllObjectsButtonElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_showAllObjectsButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_hideAllObjectsButtonElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_hideAllObjectsButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_objectsTabButtonElement",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_objectsTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "_treeView",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_treeView",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "_treeViewContextMenu",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_treeViewContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "_onModelLoaded",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_onModelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "_onModelUnloaded",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#_onModelUnloaded",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "showNodeInTreeView",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#showNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/ObjectsExplorer.js~ObjectsExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/ObjectsExplorer.js~ObjectsExplorer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/explorer/StoreysExplorer.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {TreeViewPlugin} from \"@xeokit/xeokit-sdk/src/plugins/TreeViewPlugin/TreeViewPlugin.js\";\nimport {ContextMenu} from \"@xeokit/xeokit-sdk/src/extras/ContextMenu/ContextMenu.js\";\nimport {TreeViewContextMenuItems} from \"../contextMenuItems/TreeViewContextMenuItems.js\";\n\n/** @private */\nclass StoreysExplorer extends Controller {\n\n    constructor(parent, cfg = {}) {\n\n        super(parent);\n\n        if (!cfg.storeysTabElement) {\n            throw \"Missing config: storeysTabElement\";\n        }\n\n        if (!cfg.showAllStoreysButtonElement) {\n            throw \"Missing config: showAllStoreysButtonElement\";\n        }\n\n        if (!cfg.hideAllStoreysButtonElement) {\n            throw \"Missing config: hideAllStoreysButtonElement\";\n        }\n\n        if (!cfg.storeysElement) {\n            throw \"Missing config: storeysElement\";\n        }\n\n        this._storeysTabElement = cfg.storeysTabElement;\n        this._showAllStoreysButtonElement = cfg.showAllStoreysButtonElement;\n        this._hideAllStoreysButtonElement = cfg.hideAllStoreysButtonElement;\n        this._storeysTabButtonElement = this._storeysTabElement.querySelector(\".xeokit-tab-btn\");\n\n        if (!this._storeysTabButtonElement) {\n            throw \"Missing DOM element: .xeokit-tab-btn\";\n        }\n\n        const storeysElement = cfg.storeysElement;\n\n        this._treeView = new TreeViewPlugin(this.viewer, {\n            containerElement: storeysElement,\n            autoAddModels: false,\n            hierarchy: \"storeys\"\n        });\n\n        this._treeViewContextMenu = new ContextMenu({\n            items: TreeViewContextMenuItems\n        });\n\n        this._treeView.on(\"contextmenu\", (e) => {\n            this._treeViewContextMenu.show(e.event.pageX, e.event.pageY);\n            this._treeViewContextMenu.context = {\n                viewer: e.viewer,\n                treeViewPlugin: e.treeViewPlugin,\n                treeViewNode: e.treeViewNode\n            };\n        });\n\n        this._onModelLoaded = this.viewer.scene.on(\"modelLoaded\", (modelId) =>{\n            const modelInfo = this.bimViewer._modelsExplorer.getModelInfo(modelId);\n            if (!modelInfo) {\n                return;\n            }\n            this._treeView.addModel(modelId, {\n                rootName: modelInfo.name\n            });\n        });\n\n        this._onModelUnloaded = this.viewer.scene.on(\"modelUnloaded\", (modelId) => {\n            if (this.viewer.metaScene.metaModels[modelId]) {\n                this._treeView.removeModel(modelId);\n            }\n        });\n\n        this.bimViewer.on(\"reset\", () => {\n            this._treeView.collapse();\n            this._treeView.expandToDepth(1);\n        });\n    }\n\n    setEnabled(enabled) {\n        if (!enabled) {\n            this._storeysTabButtonElement.classList.add(\"disabled\");\n            this._showAllStoreysButtonElement.classList.add(\"disabled\");\n            this._hideAllStoreysButtonElement.classList.add(\"disabled\");\n        } else {\n            this._storeysTabButtonElement.classList.remove(\"disabled\");\n            this._showAllStoreysButtonElement.classList.remove(\"disabled\");\n            this._hideAllStoreysButtonElement.classList.remove(\"disabled\");\n        }\n    }\n\n    showNodeInTreeView(objectId) {\n        this._treeView.collapse();\n        this._treeView.showNode(objectId);\n    }\n\n    destroy() {\n        super.destroy();\n        this._treeView.destroy();\n        this._treeViewContextMenu.destroy();\n        this.viewer.scene.off(this._onModelLoaded);\n        this.viewer.scene.off(this._onModelUnloaded);\n    }\n}\n\nexport {StoreysExplorer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/explorer/StoreysExplorer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "StoreysExplorer",
    "memberof": "src/explorer/StoreysExplorer.js",
    "static": true,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/explorer/StoreysExplorer.js",
    "importStyle": "{StoreysExplorer}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_storeysTabElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_storeysTabElement",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "_showAllStoreysButtonElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_showAllStoreysButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "_hideAllStoreysButtonElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_hideAllStoreysButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "_storeysTabButtonElement",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_storeysTabButtonElement",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_treeView",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_treeView",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "_treeViewContextMenu",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_treeViewContextMenu",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "_onModelLoaded",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_onModelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_onModelUnloaded",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#_onModelUnloaded",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#setEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "showNodeInTreeView",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#showNodeInTreeView",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/explorer/StoreysExplorer.js~StoreysExplorer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/explorer/StoreysExplorer.js~StoreysExplorer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "src/server/Server.js",
    "content": "import {utils} from \"@xeokit/xeokit-sdk/src/viewer/scene/utils.js\";\n\n/**\n * Default server client which loads content via HTTP from the file system.\n */\nclass Server {\n\n    /**\n     *\n     * @param cfg\n     * @param.cfg.dataDir Base directory for content.\n     */\n    constructor(cfg = {}) {\n        this._dataDir = cfg.dataDir || \"\";\n    }\n\n    /**\n     * Gets in formation on all avaialable projects.\n     *\n     * @param done\n     * @param error\n     */\n    getProjects(done, error) {\n        const url = this._dataDir + \"/projects/index.json\";\n        utils.loadJSON(url, done, error);\n    }\n\n    /**\n     * Gets information for a project.\n     *\n     * @param projectId\n     * @param done\n     * @param error\n     */\n    getProject(projectId, done, error) {\n        const url = this._dataDir + \"/projects/\" + projectId + \"/index.json\";\n        utils.loadJSON(url, done, error);\n    }\n\n    /**\n     * Gets metadata for a model within a project.\n     *\n     * @param projectId\n     * @param modelId\n     * @param done\n     * @param error\n     */\n    getMetadata(projectId, modelId, done, error) {\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/metadata.json\";\n        utils.loadJSON(url, done, error);\n    }\n\n    /**\n     * Gets geometry for a model within a project.\n     *\n     * @param projectId\n     * @param modelId\n     * @param done\n     * @param error\n     */\n    getGeometry(projectId, modelId, done, error) {\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/geometry.xkt\";\n        utils.loadArraybuffer(url, done, error);\n    }\n\n    /**\n     * Gets properties for an object within a model within a project.\n     *\n     * @param projectId\n     * @param modelId\n     * @param objectId\n     * @param done\n     * @param error\n     */\n    getProperties(projectId, modelId, objectId, done, error) {\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/objects/\" + objectId + \"/properties.json\";\n        console.log(url)\n        utils.loadJSON(url, done, error);\n    }\n\n    /**\n     * Gets issues for a model within a project.\n     *\n     * @param projectId\n     * @param modelId\n     * @param done\n     * @param error\n     */\n    getIssues(projectId, modelId, done, error) {\n        const url = this._dataDir + \"/projects/\" + projectId + \"/models/\" + modelId + \"/issues.json\";\n        utils.loadJSON(url, done, error);\n    }\n}\n\nexport {Server};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/server/Server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "class",
    "name": "Server",
    "memberof": "src/server/Server.js",
    "static": true,
    "longname": "src/server/Server.js~Server",
    "access": "public",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/server/Server.js",
    "importStyle": "{Server}",
    "description": "Default server client which loads content via HTTP from the file system.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 243,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "@param.cfg.dataDir Base directory for content."
      }
    ]
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "_dataDir",
    "memberof": "src/server/Server.js~Server",
    "static": false,
    "longname": "src/server/Server.js~Server#_dataDir",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "getProjects",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getProjects",
    "access": "public",
    "description": "Gets in formation on all avaialable projects.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getProject",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getProject",
    "access": "public",
    "description": "Gets information for a project.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "getMetadata",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getMetadata",
    "access": "public",
    "description": "Gets metadata for a model within a project.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "getGeometry",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getGeometry",
    "access": "public",
    "description": "Gets geometry for a model within a project.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "getProperties",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getProperties",
    "access": "public",
    "description": "Gets properties for an object within a model within a project.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "getIssues",
    "memberof": "src/server/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/Server.js~Server#getIssues",
    "access": "public",
    "description": "Gets issues for a model within a project.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projectId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/toolbar/FirstPersonMode.js",
    "content": "import {Controller} from \"../Controller.js\";\n\n/** @private */\nclass FirstPersonMode extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n        const cameraControl = this.viewer.cameraControl;\n\n        cameraControl.firstPerson = false;\n        cameraControl.pivoting = true;\n        cameraControl.panToPointer = true;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                cameraControl.firstPerson = true;\n                cameraControl.panToPointer = true;\n                cameraControl.pivoting = false;\n            } else {\n                cameraControl.firstPerson = false;\n                cameraControl.pivoting = true;\n                cameraControl.panToPointer = true;\n            }\n            this.viewer.cameraControl.planView = false;\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (!this.getEnabled()) {\n                return;\n            }\n            const active = this.getActive();\n            this.setActive(!active);\n            event.preventDefault();\n        });\n\n        this.bimViewer.on(\"reset\", ()=>{\n            this.setActive(false);\n        });\n    }\n}\n\nexport {FirstPersonMode};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/FirstPersonMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "class",
    "name": "FirstPersonMode",
    "memberof": "src/toolbar/FirstPersonMode.js",
    "static": true,
    "longname": "src/toolbar/FirstPersonMode.js~FirstPersonMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/FirstPersonMode.js",
    "importStyle": "{FirstPersonMode}",
    "description": null,
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/FirstPersonMode.js~FirstPersonMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FirstPersonMode.js~FirstPersonMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/toolbar/FitAction.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\nconst tempVec3 = math.vec3();\n\n/** @private */\nclass FitAction extends Controller {\n\n    constructor(parent, cfg={}) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (this.getEnabled()) {\n                this.fit();\n            }\n            event.preventDefault();\n        });\n    }\n\n    fit() {\n        const scene = this.viewer.scene;\n        const aabb = scene.getAABB(scene.visibleObjectIds);\n        this.viewer.cameraFlight.flyTo({\n            aabb: aabb\n        });\n        this.viewer.cameraControl.pivotPos = math.getAABB3Center(aabb, tempVec3);\n    }\n\n    set fov(fov) {\n        this.viewer.scene.cameraFlight.fitFOV = fov;\n    }\n\n    get fov() {\n        return this.viewer.scene.cameraFlight.fitFOV;\n    }\n\n    set duration(duration) {\n        this.viewer.scene.cameraFlight.duration = duration;\n    }\n\n    get duration() {\n        return this.viewer.scene.cameraFlight.duration;\n    }\n}\n\nexport {FitAction};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/FitAction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "src/toolbar/FitAction.js",
    "static": true,
    "longname": "src/toolbar/FitAction.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/FitAction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "FitAction",
    "memberof": "src/toolbar/FitAction.js",
    "static": true,
    "longname": "src/toolbar/FitAction.js~FitAction",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/FitAction.js",
    "importStyle": "{FitAction}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "fit",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#fit",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "set",
    "name": "fov",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#fov",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 260,
    "kind": "get",
    "name": "fov",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#fov",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "set",
    "name": "duration",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#duration",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true
  },
  {
    "__docId__": 262,
    "kind": "get",
    "name": "duration",
    "memberof": "src/toolbar/FitAction.js~FitAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/FitAction.js~FitAction#duration",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "src/toolbar/HideTool.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\nfunction closeEnough(p, q) {\n    const CLICK_DIST = 4;\n    return (Math.abs(p[0] - q[0]) < 4) && (Math.abs(p[1] - q[1]) < CLICK_DIST);\n}\n\n/** @private */\nclass HideTool extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (!this.getEnabled()) {\n                return;\n            }\n            const active = this.getActive();\n            this.setActive(!active);\n            event.preventDefault();\n        });\n\n        this.bimViewer.on(\"reset\", () => {\n            this.setActive(false);\n        });\n\n        this._initHideMode();\n    }\n\n    _initHideMode() {\n        var entity = null;\n        this._onHover = this.viewer.cameraControl.on(\"hover\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                entity.highlighted = false;\n                entity = null;\n            }\n            entity = e.entity;\n            entity.highlighted = true;\n        });\n        this._onHoverOff = this.viewer.cameraControl.on(\"hoverOff\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                entity.highlighted = false;\n                entity = null;\n            }\n        });\n        const lastCoords = math.vec2();\n        this._onMousedown = this.viewer.scene.input.on(\"mousedown\", (coords) => {\n            lastCoords[0] = coords[0];\n            lastCoords[1] = coords[1];\n        });\n        this._onMouseup = this.viewer.scene.input.on(\"mouseup\", (coords) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                if (!closeEnough(lastCoords, coords)) {\n                    entity = null;\n                    return;\n                }\n                entity.visible = false;\n                entity.highlighted = false;\n                entity = null;\n            }\n        });\n    }\n}\n\nexport {HideTool};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/HideTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "closeEnough",
    "memberof": "src/toolbar/HideTool.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toolbar/HideTool.js~closeEnough",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/HideTool.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "HideTool",
    "memberof": "src/toolbar/HideTool.js",
    "static": true,
    "longname": "src/toolbar/HideTool.js~HideTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/HideTool.js",
    "importStyle": "{HideTool}",
    "description": null,
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "_initHideMode",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_initHideMode",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "_onHover",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onHover",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "_onHoverOff",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onHoverOff",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "_onMousedown",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onMousedown",
    "access": "private",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "_onMouseup",
    "memberof": "src/toolbar/HideTool.js~HideTool",
    "static": false,
    "longname": "src/toolbar/HideTool.js~HideTool#_onMouseup",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "src/toolbar/NavCubeMode.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {NavCubePlugin} from \"@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/NavCubePlugin.js\";\n\n/** @private */\nclass NavCubeMode extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.navCubeCanvasElement) {\n            throw \"Missing config: navCubeCanvasElement\";\n        }\n\n        const navCubeCanvasElement = cfg.navCubeCanvasElement;\n\n        this._navCube = new NavCubePlugin(this.viewer, {\n            canvasElement: navCubeCanvasElement,\n            fitVisible: true,\n            color: \"#CFCFCF\"\n        });\n\n        this._navCube.setVisible(this._active);\n\n        this.on(\"active\", (active) => {\n            this._navCube.setVisible(active);\n        });\n    }\n\n    destroy() {\n        this._navCube.destroy();\n        super.destroy();\n    }\n}\n\nexport {NavCubeMode};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/NavCubeMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "class",
    "name": "NavCubeMode",
    "memberof": "src/toolbar/NavCubeMode.js",
    "static": true,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/NavCubeMode.js",
    "importStyle": "{NavCubeMode}",
    "description": null,
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "_navCube",
    "memberof": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "static": false,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode#_navCube",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/toolbar/NavCubeMode.js~NavCubeMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/NavCubeMode.js~NavCubeMode#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/toolbar/OrthoMode.js",
    "content": "import {Controller} from \"../Controller.js\";\n\n/** @private */\nclass OrthoMode extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n        \n        this.on(\"active\", (active) => {\n            if (active) {\n                this.viewer.cameraFlight.flyTo({projection: \"ortho\", duration: 0.5}, () => {});\n            } else {\n                this.viewer.cameraFlight.flyTo({projection: \"perspective\", duration: 0.5}, () => {});\n            }\n        });\n        \n        buttonElement.addEventListener(\"click\", (event) => {\n            this.setActive(!this.getActive());\n            event.preventDefault();\n        });\n\n        this.bimViewer.on(\"reset\", ()=>{\n            this.setActive(false);\n        });\n    }\n}\n\nexport {OrthoMode};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/OrthoMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "OrthoMode",
    "memberof": "src/toolbar/OrthoMode.js",
    "static": true,
    "longname": "src/toolbar/OrthoMode.js~OrthoMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/OrthoMode.js",
    "importStyle": "{OrthoMode}",
    "description": null,
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/OrthoMode.js~OrthoMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/OrthoMode.js~OrthoMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/toolbar/QueryTool.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\nfunction closeEnough(p, q) {\n    const CLICK_DIST = 4;\n    return (Math.abs(p[0] - q[0]) < 4) && (Math.abs(p[1] - q[1]) < CLICK_DIST);\n}\n\n/** @private */\nclass QueryTool extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (!this.getEnabled()) {\n                return;\n            }\n            const active = this.getActive();\n            this.setActive(!active);\n            event.preventDefault();\n        });\n\n        this.bimViewer.on(\"reset\", ()=>{\n            this.setActive(false);\n        });\n\n        this._initQueryMode();\n    }\n\n    _initQueryMode() {\n        const viewer = this.viewer;\n        const cameraControl = viewer.cameraControl;\n        var entity = null;\n        this._onHover = cameraControl.on(\"hover\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                entity.highlighted = false;\n                entity = null;\n            }\n            entity = e.entity;\n            entity.highlighted = true;\n        });\n        this._onHoverOff = cameraControl.on(\"hoverOff\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                entity.highlighted = false;\n                entity = null;\n            }\n        });\n        const lastCoords = math.vec2();\n        this._onMousedown = viewer.scene.input.on(\"mousedown\", (coords) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            lastCoords[0] = coords[0];\n            lastCoords[1] = coords[1];\n        });\n        this._onMouseup = viewer.scene.input.on(\"mouseup\", (coords) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                if (!closeEnough(lastCoords, coords)) {\n                    entity = null;\n                    return;\n                }\n                this.fire(\"queryPicked\", entity.id);\n                entity = null;\n            } else {\n                this.fire(\"queryNotPicked\", false);\n            }\n        });\n    }\n}\n\nexport {QueryTool};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/QueryTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "function",
    "name": "closeEnough",
    "memberof": "src/toolbar/QueryTool.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toolbar/QueryTool.js~closeEnough",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/QueryTool.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "class",
    "name": "QueryTool",
    "memberof": "src/toolbar/QueryTool.js",
    "static": true,
    "longname": "src/toolbar/QueryTool.js~QueryTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/QueryTool.js",
    "importStyle": "{QueryTool}",
    "description": null,
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "_initQueryMode",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_initQueryMode",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "_onHover",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onHover",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "_onHoverOff",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onHoverOff",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "_onMousedown",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onMousedown",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "_onMouseup",
    "memberof": "src/toolbar/QueryTool.js~QueryTool",
    "static": false,
    "longname": "src/toolbar/QueryTool.js~QueryTool#_onMouseup",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "file",
    "name": "src/toolbar/ResetAction.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {ModelMemento} from \"@xeokit/xeokit-sdk/src/viewer/scene/mementos/ModelMemento.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\nconst tempVec3a = math.vec3();\n\n/** @private */\nclass ResetAction extends Controller {\n\n    constructor(parent, cfg = {}) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n        const camera = this.viewer.camera;\n\n        this._modelMementos = {};\n\n        // Initial camera position - looking down negative diagonal\n\n        camera.eye = [0.577, 0.577, 0.577];\n        camera.look = [0,0,0];\n        camera.up = [-1, 1, -1];\n\n        this.bimViewer._modelsExplorer.on(\"modelLoaded\", (modelId) => {\n            this._saveModelMemento(modelId);\n        });\n\n        this.bimViewer._modelsExplorer.on(\"modelUnloaded\", (modelId) => {\n            this._destroyModelMemento(modelId);\n        });\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (this.getEnabled()) {\n                this.reset();\n            }\n            event.preventDefault();\n        });\n    }\n\n    _saveModelMemento(modelId) {\n        const metaModel = this.viewer.metaScene.metaModels[modelId];\n        if (!metaModel) {\n            return;\n        }\n        const modelMemento = new ModelMemento();\n        modelMemento.saveObjects(this.viewer.scene, metaModel);\n        this._modelMementos[modelId] = modelMemento;\n    }\n\n    _restoreModelMemento(modelId) {\n        const metaModel = this.viewer.metaScene.metaModels[modelId];\n        if (!metaModel) {\n            return;\n        }\n        const modelMemento = this._modelMementos[modelId];\n        modelMemento.restoreObjects(this.viewer.scene, metaModel);\n    }\n\n    _destroyModelMemento(modelId) {\n        delete this._modelMementos[modelId];\n    }\n\n    reset() {\n        const scene = this.viewer.scene;\n        const modelIds = scene.modelIds;\n        for (var i = 0, len = modelIds.length; i < len; i++) {\n            const modelId = modelIds[i];\n            this._restoreModelMemento(modelId);\n        }\n        this.fire(\"reset\", true);\n        this._resetCamera();\n    }\n\n    _resetCamera() {\n        const viewer = this.viewer;\n        const scene = viewer.scene;\n        const aabb = scene.getAABB(scene.visibleObjectIds);\n        const diag = math.getAABB3Diag(aabb);\n        const center = math.getAABB3Center(aabb, tempVec3a);\n        const dist = Math.abs(diag / Math.tan(65.0 / 2));     // TODO: fovy match with CameraFlight\n        const camera = scene.camera;\n        const dir = (camera.yUp) ? [-1, -1, -1] : [1, 1, 1];\n    //    const up = math.mulVec3Scalar((camera.yUp) ? [-1, 1, -1] : [-1, 1, 1], -1, []);\n        const up = (camera.yUp) ? [-1, 1, -1] : [-1, 1, 1];\n        viewer.cameraControl.pivotPos = center;\n        viewer.cameraControl.planView = false;\n        viewer.cameraFlight.flyTo({\n            look: center,\n            eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\n            up: up,\n            orthoScale: diag * 1.3,\n            projection: \"perspective\",\n            duration: 1\n        });\n    }\n}\n\nexport {ResetAction};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/ResetAction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "src/toolbar/ResetAction.js",
    "static": true,
    "longname": "src/toolbar/ResetAction.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/ResetAction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "class",
    "name": "ResetAction",
    "memberof": "src/toolbar/ResetAction.js",
    "static": true,
    "longname": "src/toolbar/ResetAction.js~ResetAction",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/ResetAction.js",
    "importStyle": "{ResetAction}",
    "description": null,
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 292,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "_modelMementos",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_modelMementos",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "_saveModelMemento",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_saveModelMemento",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "_restoreModelMemento",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_restoreModelMemento",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_destroyModelMemento",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_destroyModelMemento",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "reset",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#reset",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "_resetCamera",
    "memberof": "src/toolbar/ResetAction.js~ResetAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ResetAction.js~ResetAction#_resetCamera",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/toolbar/SectionTool.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {SectionPlanesPlugin} from \"@xeokit/xeokit-sdk/src/plugins/SectionPlanesPlugin/SectionPlanesPlugin.js\";\n\n/** @private */\nclass SectionTool extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        if (!cfg.sectionPlanesOverviewCanvasElement) {\n            throw \"Missing config: sectionPlanesOverviewCanvasElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n        const sectionPlanesOverviewCanvasElement = cfg.sectionPlanesOverviewCanvasElement;\n\n        this._sectionPlanesPlugin = new SectionPlanesPlugin(this.viewer, {\n            overviewCanvas: sectionPlanesOverviewCanvasElement\n        });\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            this._sectionPlanesPlugin.setOverviewVisible(active);\n            if (!active) {\n                this._sectionPlanesPlugin.hideControl();\n            }\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (!this.getEnabled()) {\n                return;\n            }\n            const active = this.getActive();\n            this.setActive(!active);\n            event.preventDefault();\n        });\n\n        this.bimViewer.on(\"reset\", () => {\n            this.clear();\n            this.setActive(false);\n        });\n\n        this._initSectionMode();\n    }\n\n    _initSectionMode() {\n        this._onPickedSurface = this.viewer.cameraControl.on(\"pickedSurface\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            const sectionPlane = this._sectionPlanesPlugin.createSectionPlane({\n                pos: e.worldPos,\n                dir: [-e.worldNormal[0], -e.worldNormal[1], -e.worldNormal[2]]\n            });\n            this._sectionPlanesPlugin.showControl(sectionPlane.id);\n        });\n    }\n\n    clear() {\n        this._sectionPlanesPlugin.clear();\n    }\n\n    destroy() {\n        this._sectionPlanesPlugin.destroy();\n        super.destroy();\n    }\n}\n\nexport {SectionTool};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/SectionTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "SectionTool",
    "memberof": "src/toolbar/SectionTool.js",
    "static": true,
    "longname": "src/toolbar/SectionTool.js~SectionTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/SectionTool.js",
    "importStyle": "{SectionTool}",
    "description": null,
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "_sectionPlanesPlugin",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#_sectionPlanesPlugin",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "_initSectionMode",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#_initSectionMode",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "_onPickedSurface",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#_onPickedSurface",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "clear",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#clear",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/toolbar/SectionTool.js~SectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SectionTool.js~SectionTool#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "src/toolbar/SelectionTool.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\n\nfunction closeEnough(p, q) {\n    const CLICK_DIST = 4;\n    return (Math.abs(p[0] - q[0]) < 4) && (Math.abs(p[1] - q[1]) < CLICK_DIST);\n}\n\n/** @private */\nclass SelectionTool extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            if (!this.getEnabled()) {\n                return;\n            }\n            const active = this.getActive();\n            this.setActive(!active);\n            event.preventDefault();\n        });\n\n        this.bimViewer.on(\"reset\", () => {\n            this.setActive(false);\n        });\n\n        this._initSectionMode();\n    }\n\n    _initSectionMode() {\n        const viewer = this.viewer;\n        const cameraControl = viewer.cameraControl;\n        var entity = null;\n        this._onHover = cameraControl.on(\"hover\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                entity.highlighted = false;\n                entity = null;\n            }\n            entity = e.entity;\n            entity.highlighted = true;\n        });\n        this._onHoverOff = cameraControl.on(\"hoverOff\", (e) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                entity.highlighted = false;\n                entity = null;\n            }\n        });\n        const lastCoords = math.vec2();\n        this._onMousedown = viewer.scene.input.on(\"mousedown\", (coords) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            lastCoords[0] = coords[0];\n            lastCoords[1] = coords[1];\n        });\n        this._onMouseup = viewer.scene.input.on(\"mouseup\", (coords) => {\n            if (!this.getActive() || !this.getEnabled()) {\n                return;\n            }\n            if (entity) {\n                if (!closeEnough(lastCoords, coords)) {\n                    entity = null;\n                    return;\n                }\n                entity.selected = !entity.selected;\n                entity = null;\n            }\n        });\n    }\n}\n\nexport {SelectionTool};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/SelectionTool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "function",
    "name": "closeEnough",
    "memberof": "src/toolbar/SelectionTool.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toolbar/SelectionTool.js~closeEnough",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/SelectionTool.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "SelectionTool",
    "memberof": "src/toolbar/SelectionTool.js",
    "static": true,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/SelectionTool.js",
    "importStyle": "{SelectionTool}",
    "description": null,
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "_initSectionMode",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_initSectionMode",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "_onHover",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onHover",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "_onHoverOff",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onHoverOff",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "_onMousedown",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onMousedown",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_onMouseup",
    "memberof": "src/toolbar/SelectionTool.js~SelectionTool",
    "static": false,
    "longname": "src/toolbar/SelectionTool.js~SelectionTool#_onMouseup",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "src/toolbar/ThreeDMode.js",
    "content": "import {Controller} from \"../Controller.js\";\nimport {math} from \"@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\";\n\nconst tempVec3a = math.vec3();\n\n/** @private */\nclass ThreeDMode extends Controller {\n\n    constructor(parent, cfg) {\n\n        super(parent, cfg);\n\n        if (!cfg.buttonElement) {\n            throw \"Missing config: buttonElement\";\n        }\n\n        const buttonElement = cfg.buttonElement;\n\n        this.on(\"enabled\", (enabled) => {\n            if (!enabled) {\n                buttonElement.classList.add(\"disabled\");\n            } else {\n                buttonElement.classList.remove(\"disabled\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n            if (active) {\n                buttonElement.classList.add(\"active\");\n            } else {\n                buttonElement.classList.remove(\"active\");\n            }\n        });\n\n        this.on(\"active\", (active) => {\n\n            if (active) {\n\n                const viewer = this.viewer;\n                const scene = viewer.scene;\n                const aabb = scene.getAABB(scene.visibleObjectIds);\n                const diag = math.getAABB3Diag(aabb);\n                const center = math.getAABB3Center(aabb, tempVec3a);\n                const dist = Math.abs(diag / Math.tan(65.0 / 2));     // TODO: fovy match with CameraFlight\n                const camera = scene.camera;\n                const dir = (camera.yUp) ? [-1, -1, -1] : [1, 1, 1];\n                const up = (camera.yUp) ? [-1, 1, -1] : [-1, 1, 1];\n                viewer.cameraControl.pivotPos = center;\n                viewer.cameraControl.planView = false;\n\n                viewer.cameraFlight.flyTo({\n                    look: center,\n                    eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\n                    up: up,\n                    orthoScale: diag * 1.3,\n                    projection: \"perspective\",\n                    duration: 1\n                });\n\n                this.bimViewer._navCubeMode.setActive(true);\n\n            } else {\n\n                this.bimViewer._sectionTool.setActive(false);\n                this.bimViewer._sectionTool.clear();\n\n                const viewer = this.viewer;\n                const scene = viewer.scene;\n                const camera = scene.camera;\n                const aabb = scene.getAABB(scene.visibleObjectIds);\n                const look2 = math.getAABB3Center(aabb);\n                const diag = math.getAABB3Diag(aabb);\n                const fitFOV = 45; // fitFOV;\n                const sca = Math.abs(diag / Math.tan(fitFOV * math.DEGTORAD));\n                const orthoScale2 = diag * 1.3;\n                const eye2 = tempVec3a;\n\n                eye2[0] = look2[0] + (camera.worldUp[0] * sca);\n                eye2[1] = look2[1] + (camera.worldUp[1] * sca);\n                eye2[2] = look2[2] + (camera.worldUp[2] * sca);\n\n                const up2 = math.mulVec3Scalar(camera.worldForward, -1, []);\n\n                viewer.cameraFlight.flyTo({\n                    projection: \"ortho\",\n                    eye: eye2,\n                    look: look2,\n                    up: up2,\n                    orthoScale: orthoScale2\n                }, () =>{\n                    this.bimViewer._navCubeMode.setActive(false);\n                });\n            }\n\n            this.viewer.cameraControl.planView = !active;\n            this.bimViewer._firstPersonMode.setEnabled(active);\n           // this.bimViewer._ortho.setEnabled(active);\n            this.bimViewer._sectionTool.setEnabled(active);\n\n            if (!active) {\n                this.bimViewer._sectionTool.setActive(false);\n                //this.bimViewer._firstPersonMode.setActive(false);\n            }\n\n        });\n\n        buttonElement.addEventListener(\"click\", (event) => {\n            this.setActive(!this.getActive());\n            event.preventDefault();\n        });\n\n\n        this.bimViewer.on(\"reset\", () => {\n            this.setActive(true);\n        });\n    }\n}\n\nexport {ThreeDMode};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/src/toolbar/ThreeDMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "src/toolbar/ThreeDMode.js",
    "static": true,
    "longname": "src/toolbar/ThreeDMode.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/ThreeDMode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "class",
    "name": "ThreeDMode",
    "memberof": "src/toolbar/ThreeDMode.js",
    "static": true,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "access": "private",
    "export": true,
    "importPath": "@xeokit/xeokit-viewer/src/toolbar/ThreeDMode.js",
    "importStyle": "{ThreeDMode}",
    "description": null,
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Controller.js~Controller"
    ],
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/toolbar/ThreeDMode.js~ThreeDMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/toolbar/ThreeDMode.js~ThreeDMode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "kind": "index",
    "content": "# xeokit-viewer\n\nxeokit-viewer is an open source BIM viewer for the Web, built on the [xeokit SDK](http://xeokit.io). The viewer is developed by [xeolabs](http://xeolabs.com) for integration within [OpenProject's](https://www.openproject.org/) BIM construction project management software, and is also usable as a stand-alone viewer for your BIM models. \n \n[![Screenshothttps://xeokit.github.io/xeokit-licensing/](https://github.com/xeokit/xeokit-viewer/raw/master/images/xeokit-viewer.png)](https://xeokit.github.io/xeokit-viewer/viewer.html?project=OTCConferenceCenter&tab=storeys).\n\n## Contents\n\n * [Links](#links)\n * [Features](#features)\n  * [Demos](#demos)\n  * [Roadmap](#roadmap)\n  * [License](#license)\n  * [Usage](#usage)\n    + [Model Database](#model-database)\n      - [Adding your own models](#adding-your-own-models)\n      - [Loading models from a custom source](#loading-models-from-a-custom-source)\n    + [Customizing CSS](#customizing-css)\n    + [Tooltips](#tooltips)\n    + [Customizing Appearances of IFC Types](#customizing-appearances-of-ifc-types)\n  * [Building](#building)\n  \n## Links\n\n* [Homepage](https://xeokit.github.io/xeokit-viewer/)\n* [Source Code](https://github.com/xeokit/xeokit-viewer)\n* [API Docs](https://xeokit.github.io/xeokit-viewer/docs)\n* [xeokit SDK](http://xeokit.io)\n\n## Features\n\n* Uses [xeokit SDK](https://xeokit.io) for super fast loading and rendering of large models.\n* Works in all major browsers, including mobile.\n* Loads BIM geometry and metadata from the file system.\n* Loads multiple models, at arbitrary position, scale and rotation.\n* Configure custom appearances for IFC types.\n* Supports IFC2x3 and IFC4.\n* 3D and 2D viewing modes.\n* Tree view with three hierarchy modes: containment, IFC type and storeys.\n* X-ray, highlight, show, hide and slice objects. \n* Customize with your own CSS.\n* JavaScript programming API - load models, move camera, show/hide/select/xray objects etc.\n* Implemented in JavaScript (ES6), with no external dependencies (other than xeokit).\n\n## Demos \n\n| Live Demo | Model Source |\n|---|---|\n| [OTC Conference Center](https://xeokit.github.io/xeokit-viewer/viewer.html?project=OTCConferenceCenter&tab=storeys) | [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/301) |\n| [Holter Tower](https://xeokit.github.io/xeokit-viewer/viewer.html?project=HolterTower&tab=storeys)| [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/316) |\n| [West Riverside Hospital](https://xeokit.github.io/xeokit-viewer/viewer.html?project=WestRiversideHospital&tab=models)| [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/308) |\n| [Schependomlaan](https://xeokit.github.io/xeokit-viewer/viewer.html?project=Schependomlaan&tab=storeys)| [Details](https://github.com/openBIMstandards/DataSetSchependomlaan) |\n| [Duplex](https://xeokit.github.io/xeokit-viewer/viewer.html?project=Duplex&tab=storeys)| [Details](http://openifcmodel.cs.auckland.ac.nz/Model/Details/274) |\n| [Duplex and Conference Center](https://xeokit.github.io/xeokit-viewer/viewer.html?project=ManyModels)| [Duplex](http://openifcmodel.cs.auckland.ac.nz/Model/Details/274), [Conference Center](http://openifcmodel.cs.auckland.ac.nz/Model/Details/301) |\n\n## Roadmap\n\n- [x] Standalone viewer MVP\n- [x] Integration into [OpenProject](https://www.openproject.org/)\n- [x] Save and load BCF viewpoints\n- [x] Programming API\n- [ ] Measurement tools\n- [ ] Memory usage monitoring\n- [ ] Explode tool  \n- [ ] Ambient shadows (SAO)\n\nDo you have feedback, or features you'd like to see in the viewer? Let us know in the [issue tracker](https://github.com/xeokit/xeokit-viewer/issues).  \n  \n## License\n\nxeokit-viewer is bundled with the xeokit SDK, which is provided under an [Affero GPL V3](https://github.com/xeokit/xeokit-sdk/blob/master/LICENSE.txt) dual-license, which allows free use for non-commercial purposes, with the option to buy a licence for commercial use. Please [see here](https://xeokit.github.io/xeokit-licensing/) for commercial licensing options.\n\n## Usage\n\n### Model Database\n\nThe viewer loads models from the file system by default. These are contained within the [./data](https://github.com/xeokit/xeokit-viewer/tree/master/data) directory, which also contains a number of sample models to get you started. \n\nEach model consists of an ````.XKT```` binary geometry file and a JSON metadata file which classifies its IFC elements. \n\nModels are grouped within *projects*. Each project can contain multiple models, and has a JSON ````index.json```` manifest which lists its models.\n\nAt the root of ````./data```` is a JSON ````index.json```` manifest that lists all the projects.\n\nThe directory structure is designed to support RESTful queries, ie:\n\n\n| Query  | Path |\n|---|---|\n| Get all projects | ````GET ./data/index.json```` |\n| Get project | ````GET ./data/WestRiversideHospital/index.json````  |\n| Get model geometry | ````GET ./data/WestRiversideHospital/electrical/geometry.xkt```` |\n| Get model metadata | ````GET ./data/WestRiversideHospital/electrical/metadata.json```` |\n\nShown below is a portion of the ````./data```` directory, showing the directory structure.\n\n````\n./data/\n└── projects\n    ├── index.json\n    ├── Duplex\n    │   ├── index.json\n    │   └── models\n    │       └── design\n    │           ├── geometry.xkt\n    │           ├── issues.json\n    │           └── metadata.json\n    └── WestRiversideHospital\n          ├── index.json\n          └── models\n              ├── electrical\n              │   ├── geometry.xkt\n              │   └── metadata.json\n              ├── fireAlarms\n              │   ├── geometry.xkt\n              │   └── metadata.json\n              ├── plumbing\n              │   ├── geometry.xkt\n              │   └── metadata.json\n              ├── sprinklers\n              │   ├── geometry.xkt\n              │   └── metadata.json\n              └── structure\n                  ├── geometry.xkt\n                  └── metadata.json\n````\n\nThe ````index.json```` at the root of ````./data```` shown below. The ````id```` of each project matches the name of that project's subdirectory. \n\n````json\n{\n  \"projects\": [\n    {\n      \"id\": \"Duplex\",\n      \"name\": \"Duplex\",\n      \"position\": [-20, 0.0, -10.0],\n      \"scale\": [1.0, 1.0, 1.0],\n      \"rotation\": [0.0, 0.0, 0.0]\n    },\n    {\n      \"id\": \"WestRiversideHospital\",\n      \"name\": \"West Riverside Hospital\",\n      \"position\": [20, 0.0, 0.0],\n      \"scale\": [1.0, 1.0, 1.0],\n      \"rotation\": [0.0, 0.0, 0.0]\n    },\n    //...\n  ]\n}\n```` \n\nThe ````index.json```` for the \"WestRiversideHospital\" project is shown below. The ````id```` of each model matches the name of that model's subdirectory, while ````name```` is the string that's displayed for the model in the viewers Models tab.\n\n````json\n{\n  \"id\": \"WestRiversideHospital\",\n  \"name\": \"West Riverside Hospital\",\n  \"models\": [\n    {\n      \"id\": \"structure\",\n      \"name\": \"Hospital Structure\",\n      \"default\": true\n    },\n    {\n      \"id\": \"electrical\",\n      \"name\": \"Hospital Electrical\"\n    },\n    {\n      \"id\": \"sprinklers\",\n      \"name\": \"Hospital Sprinklers\"\n    },\n    {\n      \"id\": \"plumbing\",\n      \"name\": \"Hospital Plumbing\"\n    },\n    {\n      \"id\": \"fireAlarms\",\n      \"name\": \"Hospital Fire Alarms\"\n    }\n  ]\n}\n````\n\n#### Adding your own models\n\nTo add your own project to the database, you need to: \n\n * add a new project directory within ````./data````,\n * add a subdirectory within that for each model, containing each model's ````.XKT```` and metadata files,\n * add a ````index.json```` manifest of the models within the project directory, which lists the models, and\n * list your project in the ````index.json```` at the root of ````./data````.    \n\n#### Loading models from a custom source\n\nTo load models from a different source than the file system, configure\n\n````javascript\n\n\n````\n\n### Customizing CSS\n\nThe [viewer.html](https://github.com/xeokit/xeokit-viewer/blob/master/viewer.html) file for the standalone viewer contains CSS rules for the various viewer elements, which you can modify as required.\n\n### Tooltips\n\nTooltips are not part of the core JavaScript for the viewer. Instead, viewer HTML elements are marked with ````data-tippy-content```` attributes that provide strings to show in their tooltips. \n\nFor example, the *Toggle 2D/3D* button's element looks like this:\n\n````html\n<button type=\"button\" class=\"xeokit-threeD xeokit-btn fa fa-cube fa-2x\" data-tippy-content=\"Toggle 2D/3D\"></button>\n```` \n\nIn the [viewer.html](https://github.com/xeokit/xeokit-viewer/blob/master/viewer.html) file for the standalone viewer, we're using [tippy.js](https://github.com/atomiks/tippyjs), which automatically creates tooltips for those elements.\n\n### Customizing Appearances of IFC Types\n\nThe viewer loads colors for the various IFC element types straight from the IFC model, except where overrides are defined in the configuration file [src/IFCObjectDefaults/IFCObjectDefaults.js](src/IFCObjectDefaults/IFCObjectDefaults.js).\n\nYou can add or remove configurations in that file if you need to customize the color or pickability of specific IFC types.\n\nFor example, to ensure that ````IfcWindow```` and ````IfcSpace```` types are initially visible, transparent and pickable (ie. able to be selected by clicking on them), you might configure that file as shown below:\n\n````javascript\nconst IFCObjectDefaults = {\n    IfcSpace: { \n        visible: true,\n        pickable: true,\n        opacity: 0.2\n    },\n    IfcWindow: { \n        visible: true,\n        pickable: true,\n        opacity: 0.5\n    }\n};\n\nexport {IFCObjectDefaults};\n```` \n \nSometimes IFC models have opaque ````IfcWindow```` and ````IfcSpace```` elements, so it's a good idea to have configurations in there so that we can see through them.\n \n## Building \n\nInitialize:\n\n````\nsudo npm install\n````\n\nBuilding ES6 module in ````/dist/main.js````:\n\n````\nnpm run build\n````\n\nThen, within ````index.hml````, we use the module like so:\n\n````javascript\nimport {Server, ViewerUI} from \"./dist/main.js\";\n\nconst server = new Server({\n    dataDir: \"./data/\"\n});\n\nconst viewerUI = new ViewerUI(server, {\n    //...\n});\n````\n",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@xeokit/xeokit-viewer\",\n  \"version\": \"1.4.0\",\n  \"description\": \"BIM viewer built on xeokit\",\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"lib\": \"lib\"\n  },\n  \"files\": [\n    \"/css\",\n    \"/lib\",\n    \"/src\",\n    \"/dist\"\n  ],\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \" rollup -c\",\n    \"docs\": \"./node_modules/.bin/esdoc\",\n    \"publish\": \"npm publish --access public\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/xeokit/xeokit-viewer.git\"\n  },\n  \"keywords\": [\n    \"WebGL\",\n    \"BIM\",\n    \"IFC\",\n    \"xeokit\",\n    \"OpenProject\"\n  ],\n  \"author\": \"Lindsay Kay\",\n  \"license\": \"https://github.com/xeokit/xeokit-sdk/blob/master/LICENSE.txt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/xeokit/xeokit-viewer/issues\"\n  },\n  \"homepage\": \"https://github.com/xeokit/xeokit-viewer#readme\",\n  \"devDependencies\": {\n    \"autoprefixer\": \"^9.7.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"rollup\": \"^1.29.0\",\n    \"rollup-plugin-node-resolve\": \"^5.2.0\"\n  },\n  \"dependencies\": {\n    \"@xeokit/xeokit-sdk\": \"^0.6.9\"\n  }\n}\n",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-viewer/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]